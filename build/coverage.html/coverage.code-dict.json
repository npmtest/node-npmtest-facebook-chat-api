{"/home/travis/build/npmtest/node-npmtest-facebook-chat-api/test.js":"/* istanbul instrument in package npmtest_facebook_chat_api */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-facebook-chat-api/lib.npmtest_facebook_chat_api.js":"/* istanbul instrument in package npmtest_facebook_chat_api */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_facebook_chat_api = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_facebook_chat_api = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-facebook-chat-api/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-facebook-chat-api && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_facebook_chat_api */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_facebook_chat_api\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_facebook_chat_api.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_facebook_chat_api.rollup.js'] =\n            local.assetsDict['/assets.npmtest_facebook_chat_api.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_facebook_chat_api.__dirname + '/lib.npmtest_facebook_chat_api.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-facebook-chat-api/node_modules/facebook-chat-api/index.js":"\"use strict\";\n\nvar utils = require(\"./utils\");\nvar cheerio = require(\"cheerio\");\nvar log = require(\"npmlog\");\n\nvar defaultLogRecordSize = 100;\nlog.maxRecordSize = defaultLogRecordSize;\n\nfunction setOptions(globalOptions, options) {\n  Object.keys(options).map(function(key) {\n    switch (key) {\n      case 'logLevel':\n        log.level = options.logLevel;\n        globalOptions.logLevel = options.logLevel;\n        break;\n      case 'logRecordSize':\n        log.maxRecordSize = options.logRecordSize;\n        globalOptions.logRecordSize = options.logRecordSize;\n        break;\n      case 'selfListen':\n        globalOptions.selfListen = options.selfListen;\n        break;\n      case 'listenEvents':\n        globalOptions.listenEvents = options.listenEvents;\n        break;\n      case 'pageID':\n        globalOptions.pageID = options.pageID.toString();\n        break;\n      case 'updatePresence':\n        globalOptions.updatePresence = options.updatePresence;\n        break;\n      case 'forceLogin':\n        globalOptions.forceLogin = options.forceLogin;\n        break;\n      default:\n        log.warn(\"setOptions\", \"Unrecognized option given to setOptions: \" + key);\n        break;\n    }\n  });\n}\n\nfunction buildAPI(globalOptions, html, jar) {\n  var maybeCookie = jar.getCookies(\"https://www.facebook.com\").filter(function(val) {\n    return val.cookieString().split(\"=\")[0] === \"c_user\";\n  });\n\n  if(maybeCookie.length === 0) {\n    throw {error: \"Error retrieving userID. This can be caused by a lot of things, including getting blocked by Facebook for logging in from an unknown location. Try logging in with a browser to verify.\"};\n  }\n\n  var userID = maybeCookie[0].cookieString().split(\"=\")[1].toString();\n  log.info(\"login\", \"Logged in\");\n\n  var clientID = (Math.random() * 2147483648 | 0).toString(16);\n\n  // All data available to api functions\n  var ctx = {\n    userID: userID,\n    jar: jar,\n    clientID: clientID,\n    globalOptions: globalOptions,\n    loggedIn: true,\n    access_token: 'NONE'\n  };\n\n  var api = {\n    setOptions: setOptions.bind(null, globalOptions),\n    getAppState: function getAppState() {\n      return utils.getAppState(jar);\n    },\n  };\n\n  var apiFuncNames = [\n    'addUserToGroup',\n    'changeArchivedStatus',\n    'changeBlockedStatus',\n    'changeGroupImage',\n    'changeThreadColor',\n    'changeThreadEmoji',\n    'changeNickname',\n    'createPoll',\n    'deleteMessage',\n    'deleteThread',\n    'getCurrentUserID',\n    'getFriendsList',\n    'getThreadHistory',\n    'getThreadInfo',\n    'getThreadList',\n    'getThreadPictures',\n    'getUserID',\n    'getUserInfo',\n    'handleMessageRequest',\n    'listen',\n    'logout',\n    'markAsRead',\n    'muteThread',\n    'removeUserFromGroup',\n    'searchForThread',\n    'sendMessage',\n    'sendTypingIndicator',\n    'setTitle',\n  ];\n\n  var defaultFuncs = utils.makeDefaults(html, userID);\n\n  // Load all api functions in a loop\n  apiFuncNames.map(function(v) {\n    api[v] = require('./src/' + v)(defaultFuncs, api, ctx);\n  });\n\n  return [ctx, defaultFuncs, api];\n}\n\nfunction makeLogin(jar, email, password, loginOptions, callback) {\n  return function(res) {\n    var html = res.body;\n    var $ = cheerio.load(html);\n    var arr = [];\n\n    // This will be empty, but just to be sure we leave it\n    $(\"#login_form input\").map(function(i, v){\n      arr.push({val: $(v).val(), name: $(v).attr(\"name\")});\n    });\n\n    arr = arr.filter(function(v) {\n      return v.val && v.val.length;\n    });\n\n    var form = utils.arrToForm(arr);\n    form.lsd = utils.getFrom(html, \"[\\\"LSD\\\",[],{\\\"token\\\":\\\"\", \"\\\"}\");\n    form.lgndim = new Buffer(\"{\\\"w\\\":1440,\\\"h\\\":900,\\\"aw\\\":1440,\\\"ah\\\":834,\\\"c\\\":24}\").toString('base64');\n    form.email = email;\n    form.pass = password;\n    form.default_persistent = '0';\n    form.lgnrnd = utils.getFrom(html, \"name=\\\"lgnrnd\\\" value=\\\"\", \"\\\"\");\n    form.locale = 'en_US';\n    form.timezone = '240';\n    form.lgnjs = ~~(Date.now() / 1000);\n\n\n    // Getting cookies from the HTML page... (kill me now plz)\n    // we used to get a bunch of cookies in the headers of the response of the\n    // request, but FB changed and they now send those cookies inside the JS.\n    // They run the JS which then injects the cookies in the page.\n    // The \"solution\" is to parse through the html and find those cookies\n    // which happen to be conveniently indicated with a _js_ in front of their\n    // variable name.\n    //\n    // ---------- Very Hacky Part Starts -----------------\n    var willBeCookies = html.split(\"\\\"_js_\");\n    willBeCookies.slice(1).map(function(val) {\n      var cookieData = JSON.parse(\"[\\\"\" + utils.getFrom(val, \"\", \"]\") + \"]\");\n      jar.setCookie(utils.formatCookie(cookieData, \"facebook\"), \"https://www.facebook.com\");\n    });\n    // ---------- Very Hacky Part Ends -----------------\n\n    log.info(\"login\", \"Logging in...\");\n    return utils\n      .post(\"https://www.facebook.com/login.php?login_attempt=1&lwv=110\", jar, form)\n      .then(utils.saveCookies(jar))\n      .then(function(res) {\n        var headers = res.headers;\n        if (!headers.location) {\n          throw {error: \"Wrong username/password.\"};\n        }\n\n        // This means the account has login approvals turned on.\n        if (headers.location.indexOf('https://www.facebook.com/checkpoint/') > -1) {\n          var nextURL = 'https://www.facebook.com/checkpoint/?next=https%3A%2F%2Fwww.facebook.com%2Fhome.php';\n\n          return utils\n            .get(headers.location, jar)\n            .then(utils.saveCookies(jar))\n            .then(function(res) {\n              var html = res.body;\n              // Make the form in advance which will contain the fb_dtsg and nh\n              var $ = cheerio.load(html);\n              var arr = [];\n              $(\"form input\").map(function(i, v){\n                arr.push({val: $(v).val(), name: $(v).attr(\"name\")});\n              });\n\n              arr = arr.filter(function(v) {\n                return v.val && v.val.length;\n              });\n\n              var form = utils.arrToForm(arr);\n              if (html.indexOf(\"Enter Security Code to Continue\") > -1 ||\n                  html.indexOf(\"Enter Your Login Code\") > -1) {\n                throw {\n                  error: 'login-approval',\n                  continue: function(code) {\n                    form.approvals_code = code;\n                    form['submit[Continue]'] = 'Continue';\n                    return utils\n                      .post(nextURL, jar, form)\n                      .then(utils.saveCookies(jar))\n                      .then(function() {\n                        // Use the same form (safe I hope)\n                        form.name_action_selected = 'save_device';\n\n                        return utils\n                          .post(nextURL, jar, form)\n                          .then(utils.saveCookies(jar));\n                      })\n                      .then(function(res) {\n                        var headers = res.headers;\n                        if (!headers.location && res.body.indexOf('Review Recent Login') > -1) {\n                          throw {error: \"Something went wrong with login approvals.\"};\n                        }\n\n                        var appState = utils.getAppState(jar);\n\n                        // Simply call loginHelper because all it needs is the jar\n                        // and will then complete the login process\n                        return loginHelper(appState, email, password, loginOptions, callback);\n                      })\n                      .catch(function(err) {\n                        callback(err);\n                      });\n                  }\n                };\n              } else {\n                if (!loginOptions.forceLogin) {\n                  throw {error: \"Couldn't login. Facebook might have blocked this account. Please login with a browser or enable the option 'forceLogin' and try again.\"};\n                }\n                if (html.indexOf(\"Suspicious Login Attempt\") > -1) {\n                  form['submit[This was me]'] = \"This was me\";\n                } else {\n                  form['submit[This Is Okay]'] = \"This Is Okay\";\n                }\n\n                return utils\n                  .post(nextURL, jar, form)\n                  .then(utils.saveCookies(jar))\n                  .then(function() {\n                    // Use the same form (safe I hope)\n                    form.name_action_selected = 'save_device';\n\n                    return utils\n                      .post(nextURL, jar, form)\n                      .then(utils.saveCookies(jar));\n                  })\n                  .then(function(res) {\n                    var headers = res.headers;\n\n                    if (!headers.location && res.body.indexOf('Review Recent Login') > -1) {\n                      throw {error: \"Something went wrong with review recent login.\"};\n                    }\n\n                    var appState = utils.getAppState(jar);\n\n                    // Simply call loginHelper because all it needs is the jar\n                    // and will then complete the login process\n                    return loginHelper(appState, email, password, loginOptions, callback);\n                  })\n                  .catch(function(e) {\n                    callback(e);\n                  });\n              }\n            });\n        }\n\n        return utils\n          .get('https://www.facebook.com/', jar)\n          .then(utils.saveCookies(jar));\n      });\n  };\n}\n\n// Helps the login\nfunction loginHelper(appState, email, password, globalOptions, callback) {\n  var mainPromise = null;\n  var jar = utils.getJar();\n\n  // If we're given an appState we loop through it and save each cookie\n  // back into the jar.\n  if(appState) {\n    appState.map(function(c) {\n      var str = c.key + \"=\" + c.value + \"; expires=\" + c.expires + \"; domain=\" + c.domain + \"; path=\" + c.path + \";\";\n      jar.setCookie(str, \"http://\" + c.domain);\n    });\n\n    // Load the main page.\n    mainPromise = utils\n      .get('https://www.facebook.com/', jar)\n      .then(utils.saveCookies(jar));\n  } else {\n    // Open the main page, then we login with the given credentials and finally\n    // load the main page again (it'll give us some IDs that we need)\n    mainPromise = utils\n      .get(\"https://www.facebook.com/\", null)\n      .then(utils.saveCookies(jar))\n      .then(makeLogin(jar, email, password, globalOptions, callback))\n      .then(function() {\n        return utils\n          .get('https://www.facebook.com/', jar)\n          .then(utils.saveCookies(jar));\n      });\n  }\n\n  var ctx = null;\n  var defaultFuncs = null;\n  var api = null;\n\n  mainPromise = mainPromise\n    .then(function(res) {\n      var html = res.body;\n      var stuff = buildAPI(globalOptions, html, jar);\n      ctx = stuff[0];\n      defaultFuncs = stuff[1];\n      api = stuff[2];\n      return res;\n    })\n    .then(function() {\n      var form = {\n        reason: 6\n      };\n      log.info(\"login\", 'Request to reconnect');\n      return defaultFuncs\n        .get(\"https://www.facebook.com/ajax/presence/reconnect.php\", ctx.jar, form)\n        .then(utils.saveCookies(ctx.jar));\n    })\n    .then(function(res) {\n      log.info(\"login\", 'Request to pull 1');\n      var form = {\n        channel : 'p_' + ctx.userID,\n        seq : 0,\n        partition : -2,\n        clientid : ctx.clientID,\n        viewer_uid : ctx.userID,\n        uid : ctx.userID,\n        state : 'active',\n        idle : 0,\n        cap : 8,\n        msgs_recv: 0\n      };\n      var presence = utils.generatePresence(ctx.userID);\n      ctx.jar.setCookie(\"presence=\" + presence + \"; path=/; domain=.facebook.com; secure\", \"https://www.facebook.com\");\n      ctx.jar.setCookie(\"presence=\" + presence + \"; path=/; domain=.messenger.com; secure\", \"https://www.messenger.com\");\n      ctx.jar.setCookie(\"locale=en_US; path=/; domain=.facebook.com; secure\", \"https://www.facebook.com\");\n      ctx.jar.setCookie(\"locale=en_US; path=/; domain=.messenger.com; secure\", \"https://www.messenger.com\");\n      ctx.jar.setCookie(\"a11y=\" + utils.generateAccessiblityCookie() + \"; path=/; domain=.facebook.com; secure\", \"https://www.facebook.com\");\n\n      return utils\n        .get(\"https://0-edge-chat.facebook.com/pull\", ctx.jar, form)\n        .then(utils.saveCookies(ctx.jar))\n        .then(function(res) {\n          var ret = null;\n          try {\n            ret = JSON.parse(utils.makeParsable(res.body));\n          } catch(e) {\n            throw {error: \"Error inside first pull request. Received HTML instead of JSON. Logging in inside a browser might help fix this.\"};\n          }\n\n          return ret;\n        });\n    })\n    .then(function(resData) {\n      if (resData.t !== 'lb') throw {error: \"Bad response from pull 1\"};\n\n      var form = {\n        channel : 'p_' + ctx.userID,\n        seq : 0,\n        partition : -2,\n        clientid : ctx.clientID,\n        viewer_uid : ctx.userID,\n        uid : ctx.userID,\n        state : 'active',\n        idle : 0,\n        cap : 8,\n        msgs_recv:0,\n        sticky_token: resData.lb_info.sticky,\n        sticky_pool: resData.lb_info.pool,\n      };\n\n      log.info(\"login\", \"Request to pull 2\");\n      return utils\n        .get(\"https://0-edge-chat.facebook.com/pull\", ctx.jar, form)\n        .then(utils.saveCookies(ctx.jar));\n    })\n    .then(function() {\n      var form = {\n        'client' : 'mercury',\n        'folders[0]': 'inbox',\n        'last_action_timestamp' : '0'\n      };\n      log.info(\"login\", \"Request to thread_sync\");\n\n      return defaultFuncs\n        .post(\"https://www.facebook.com/ajax/mercury/thread_sync.php\", ctx.jar, form)\n        .then(utils.saveCookies(ctx.jar));\n    });\n\n  // given a pageID we log in as a page\n  if (globalOptions.pageID) {\n    mainPromise = mainPromise\n      .then(function() {\n        return utils\n          .get('https://www.facebook.com/' + ctx.globalOptions.pageID + '/messages/?section=messages&subsection=inbox', ctx.jar);\n      })\n      .then(function(resData) {\n        var url = utils.getFrom(resData.body, 'window.location.replace(\"https:\\\\/\\\\/www.facebook.com\\\\', '\");').split('\\\\').join('');\n        url = url.substring(0, url.length - 1);\n\n        return utils\n          .get('https://www.facebook.com' + url, ctx.jar);\n      });\n  }\n\n  // At the end we call the callback or catch an exception\n  mainPromise\n    .then(function() {\n      log.info(\"login\", 'Done logging in.');\n      return callback(null, api);\n    })\n    .catch(function(e) {\n      log.error(\"login\", e.error || e);\n      callback(e);\n    });\n}\n\nfunction login(loginData, options, callback) {\n  if(utils.getType(options) === 'Function') {\n    callback = options;\n    options = {};\n  }\n\n  var globalOptions = {\n    selfListen: false,\n    listenEvents: false,\n    updatePresence: false,\n    forceLogin: false,\n    logRecordSize: defaultLogRecordSize\n  };\n\n  setOptions(globalOptions, options);\n\n  loginHelper(loginData.appState, loginData.email, loginData.password, globalOptions, callback);\n}\n\nmodule.exports = login;\n","/home/travis/build/npmtest/node-npmtest-facebook-chat-api/node_modules/facebook-chat-api/utils.js":"\"use strict\";\n\nvar bluebird = require(\"bluebird\");\nvar request = bluebird.promisify(require(\"request\").defaults({jar: true}));\nvar stream = require('stream');\nvar log = require('npmlog');\n\nfunction getHeaders(url) {\n  var headers = {\n    'Content-Type' : 'application/x-www-form-urlencoded',\n    'Referer' : 'https://www.facebook.com/',\n    'Host' : url.replace('https://', '').split(\"/\")[0],\n    'Origin' : 'https://www.facebook.com',\n    'User-Agent' : 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/600.3.18 (KHTML, like Gecko) Version/8.0.3 Safari/600.3.18',\n    'Connection' : 'keep-alive',\n  };\n\n  return headers;\n}\n\nfunction isReadableStream(obj) {\n  return obj instanceof stream.Stream &&\n    getType(obj._read) === 'Function' &&\n    getType(obj._readableState) === 'Object';\n}\n\nfunction get(url, jar, qs) {\n  // I'm still confused about this\n  if(getType(qs) === \"Object\") {\n    for(var prop in qs) {\n      if(qs.hasOwnProperty(prop) && getType(qs[prop]) === \"Object\") {\n        qs[prop] = JSON.stringify(qs[prop]);\n      }\n    }\n  }\n  var op = {\n    headers: getHeaders(url),\n    timeout: 60000,\n    qs: qs,\n    url: url,\n    method: \"GET\",\n    jar: jar,\n    gzip: true\n  };\n\n  return request(op).then(function(res) {return res[0];});\n}\n\nfunction post(url, jar, form) {\n  var op = {\n    headers: getHeaders(url),\n    timeout: 60000,\n    url: url,\n    method: \"POST\",\n    form: form,\n    jar: jar,\n    gzip: true\n  };\n\n  return request(op).then(function(res) {return res[0];});\n}\n\nfunction postFormData(url, jar, form, qs) {\n  var headers = getHeaders(url);\n  headers['Content-Type'] = 'multipart/form-data';\n  var op = {\n    headers: headers,\n    timeout: 60000,\n    url: url,\n    method: \"POST\",\n    formData: form,\n    qs: qs,\n    jar: jar,\n    gzip: true\n  };\n\n  return request(op).then(function(res) {return res[0];});\n}\n\nfunction padZeros(val, len) {\n    val = String(val);\n    len = len || 2;\n    while (val.length < len) val = \"0\" + val;\n    return val;\n}\n\nfunction generateThreadingID(clientID) {\n  var k = Date.now();\n  var l = Math.floor(Math.random() * 4294967295);\n  var m = clientID;\n  return (\"<\" + k + \":\" + l + \"-\" + m + \"@mail.projektitan.com>\");\n}\n\nfunction binaryToDecimal(data) {\n  var ret = \"\";\n  while (data !== \"0\") {\n    var end = 0;\n    var fullName = \"\";\n    var i = 0;\n    for (;i < data.length;i++) {\n      end = 2 * end + parseInt(data[i], 10);\n      if (end >= 10) {\n        fullName += \"1\";\n        end -= 10;\n      } else {\n        fullName += \"0\";\n      }\n    }\n    ret = end.toString() + ret;\n    data = fullName.slice(fullName.indexOf(\"1\"));\n  }\n  return ret;\n}\n\nfunction generateOfflineThreadingID() {\n  var ret = Date.now();\n  var value = Math.floor(Math.random() * 4294967295);\n  var str = (\"0000000000000000000000\" + value.toString(2)).slice(-22);\n  var msgs = ret.toString(2) + str;\n  return binaryToDecimal(msgs);\n}\n\nvar h;\nvar i = {};\nvar j = {\n  _: '%',\n  A: '%2',\n  B: '000',\n  C: '%7d',\n  D: '%7b%22',\n  E: '%2c%22',\n  F: '%22%3a',\n  G: '%2c%22ut%22%3a1',\n  H: '%2c%22bls%22%3a',\n  I: '%2c%22n%22%3a%22%',\n  J: '%22%3a%7b%22i%22%3a0%7d',\n  K: '%2c%22pt%22%3a0%2c%22vis%22%3a',\n  L: '%2c%22ch%22%3a%7b%22h%22%3a%22',\n  M: '%7b%22v%22%3a2%2c%22time%22%3a1',\n  N: '.channel%22%2c%22sub%22%3a%5b',\n  O: '%2c%22sb%22%3a1%2c%22t%22%3a%5b',\n  P: '%2c%22ud%22%3a100%2c%22lc%22%3a0',\n  Q: '%5d%2c%22f%22%3anull%2c%22uct%22%3a',\n  R: '.channel%22%2c%22sub%22%3a%5b1%5d',\n  S: '%22%2c%22m%22%3a0%7d%2c%7b%22i%22%3a',\n  T: '%2c%22blc%22%3a1%2c%22snd%22%3a1%2c%22ct%22%3a',\n  U: '%2c%22blc%22%3a0%2c%22snd%22%3a1%2c%22ct%22%3a',\n  V: '%2c%22blc%22%3a0%2c%22snd%22%3a0%2c%22ct%22%3a',\n  W: '%2c%22s%22%3a0%2c%22blo%22%3a0%7d%2c%22bl%22%3a%7b%22ac%22%3a',\n  X: '%2c%22ri%22%3a0%7d%2c%22state%22%3a%7b%22p%22%3a0%2c%22ut%22%3a1',\n  Y: '%2c%22pt%22%3a0%2c%22vis%22%3a1%2c%22bls%22%3a0%2c%22blc%22%3a0%2c%22snd%22%3a1%2c%22ct%22%3a',\n  Z: '%2c%22sb%22%3a1%2c%22t%22%3a%5b%5d%2c%22f%22%3anull%2c%22uct%22%3a0%2c%22s%22%3a0%2c%22blo%22%3a0%7d%2c%22bl%22%3a%7b%22ac%22%3a'\n};\n(function() {\n  var l = [];\n  for (var m in j) {\n    i[j[m]] = m;\n    l.push(j[m]);\n  }\n  l.reverse();\n  h = new RegExp(l.join(\"|\"), 'g');\n})();\n\nfunction presenceEncode(str) {\n  return encodeURIComponent(str).replace(/([_A-Z])|%../g, function(m, n) {\n    return n ? '%' + n.charCodeAt(0).toString(16) : m;\n  }).toLowerCase().replace(h, function(m) {\n    return i[m];\n  });\n}\n\nfunction presenceDecode(str) {\n  return decodeURIComponent(str.replace(/[_A-Z]/g, function(m) {\n    return j[m];\n  }));\n}\n\nfunction generatePresence(userID) {\n  var time = Date.now();\n  return \"E\" + presenceEncode(JSON.stringify({\n    \"v\": 3,\n    \"time\": parseInt(time / 1000, 10),\n    \"user\": userID,\n    \"state\": {\n      \"ut\": 0,\n      \"t2\": [],\n      \"lm2\": null,\n      \"uct2\": time,\n      \"tr\": null,\n      \"tw\": Math.floor(Math.random() * 4294967295) + 1,\n      \"at\": time\n    },\n    \"ch\":{\n      [\"p_\" + userID]: 0\n    }\n  }))\n}\n\nfunction generateAccessiblityCookie() {\n  var time = Date.now();\n  return encodeURIComponent(\n    JSON.stringify({\n      sr: 0,\n      'sr-ts': time,\n      jk: 0,\n      'jk-ts': time,\n      kb: 0,\n      'kb-ts': time,\n      hcm: 0,\n      'hcm-ts': time\n    }\n  ));\n}\n\nfunction getGUID() {\n  /** @type {number} */\n  var sectionLength = Date.now();\n  /** @type {string} */\n  var id = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {\n    /** @type {number} */\n    var r = Math.floor((sectionLength + Math.random() * 16) % 16);\n    /** @type {number} */\n    sectionLength = Math.floor(sectionLength / 16);\n    /** @type {string} */\n    var _guid = (c == \"x\" ? r : r & 7 | 8).toString(16);\n    return _guid;\n  });\n  return id;\n}\n\nfunction _formatAttachment(attachment1, attachment2) {\n  // TODO: THIS IS REALLY BAD\n  // This is an attempt at fixing Facebook's inconsistencies. Sometimes they give us\n  // two attachement objects, but sometimes only one. They each contain part of the\n  // data that you'd want so we merge them for convenience.\n  // Instead of having a bunch of if statements guarding every access to image_data,\n  // we set it to empty object and use the fact that it'll return undefined.\n  attachment2 = attachment2 || {id:\"\", image_data: {}};\n  var fileName = attachment1.filename\n  attachment1 = attachment1.mercury ? attachment1.mercury : attachment1\n\n  switch (attachment1.attach_type) {\n    case \"sticker\":\n      return {\n        type: \"sticker\",\n        url: attachment1.url,\n        stickerID: attachment1.metadata.stickerID.toString(),\n        packID: attachment1.metadata.packID.toString(),\n        frameCount: attachment1.metadata.frameCount,\n        frameRate: attachment1.metadata.frameRate,\n        framesPerRow: attachment1.metadata.framesPerRow,\n        framesPerCol: attachment1.metadata.framesPerCol,\n        spriteURI: attachment1.metadata.spriteURI,\n        spriteURI2x: attachment1.metadata.spriteURI2x,\n        height: attachment1.metadata.height,\n        width: attachment1.metadata.width,\n        caption: attachment2.caption,\n        description: attachment2.description,\n      };\n    case \"file\":\n      return {\n        type: \"file\",\n        name: attachment1.name,\n        url: attachment1.url,\n        ID: attachment2.id.toString(),\n        fileSize: attachment2.file_size,\n        isMalicious: attachment2.is_malicious,\n        mimeType: attachment2.mime_type,\n      };\n    case \"photo\":\n      return {\n        type: \"photo\",\n        ID: attachment1.metadata.fbid.toString(),\n        filename: fileName,\n        thumbnailUrl: attachment1.thumbnail_url,\n        \n        previewUrl: attachment1.preview_url,\n        previewWidth: attachment1.preview_width,\n        previewHeight: attachment1.preview_height,\n\n        largePreviewUrl: attachment1.large_preview_url,\n        largePreviewWidth: attachment1.large_preview_width,\n        largePreviewHeight: attachment1.large_preview_height,\n        \n        url: attachment1.metadata.url,\n        width: attachment1.metadata.dimensions.split(',')[0],\n        height: attachment1.metadata.dimensions.split(',')[1],\n      };\n    case \"animated_image\":\n      return {\n        type: \"animated_image\",\n        name: attachment1.name,\n        facebookUrl: attachment1.url,\n        previewUrl: attachment1.preview_url,\n        previewWidth: attachment1.preview_width,\n        previewHeight: attachment1.preview_height,\n        thumbnailUrl: attachment1.thumbnail_url,\n        ID: attachment2.id.toString(),\n        filename: attachment2.filename,\n        mimeType: attachment2.mime_type,\n        width: attachment2.image_data.width,\n        height: attachment2.image_data.height,\n        url: attachment2.image_data.url,\n        rawGifImage: attachment2.image_data.raw_gif_image,\n        rawWebpImage: attachment2.image_data.raw_webp_image,\n        animatedGifUrl: attachment2.image_data.animated_gif_url,\n        animatedGifPreviewUrl: attachment2.image_data.animated_gif_preview_url,\n        animatedWebpUrl: attachment2.image_data.animated_webp_url,\n        animatedWebpPreviewUrl: attachment2.image_data.animated_webp_preview_url,\n      };\n    case \"share\":\n      return {\n        type: \"share\",\n        description: attachment1.share.description,\n        ID: attachment1.share.share_id.toString(),\n        subattachments: attachment1.share.subattachments,\n        animatedImageSize: attachment1.share.media.animated_image_size,\n        width: attachment1.share.media.image_size.width,\n        height: attachment1.share.media.image_size.height,\n        image: attachment1.share.media.image,\n        playable: attachment1.share.media.playable,\n        duration: attachment1.share.media.duration,\n        source: attachment1.share.source,\n        title: attachment1.share.title,\n        facebookUrl: attachment1.share.uri,\n        url: attachment2.href,\n      };\n    case \"video\":\n      return {\n        type: \"video\",\n        filename: attachment1.name,\n        thumbnailUrl: attachment1.thumbnail_url,\n        previewUrl: attachment1.preview_url,\n        previewWidth: attachment1.preview_width,\n        previewHeight: attachment1.preview_height,\n        ID: attachment1.metadata.fbid.toString(),\n        url: attachment1.url,\n        width: attachment1.metadata.dimensions.width,\n        height: attachment1.metadata.dimensions.height,\n        duration: attachment1.metadata.duration,\n      };\n    case \"error\":\n      return {\n        type: \"error\",\n\n        // Save error attachments because we're unsure of their format,\n        // and whether there are cases they contain something useful for debugging.\n        attachment1: attachment1,\n        attachment2: attachment2\n      };\n    default:\n      throw new Error(\"unrecognized attach_file `\" + JSON.stringify(attachment1) + \"`\");\n  }\n}\n\nfunction formatAttachment(attachments, attachmentIds, attachmentMap, shareMap) {\n  attachmentMap = shareMap || attachmentMap;\n  return attachments ? attachments.map(function(val, i) {\n    if (!attachmentMap || !attachmentIds || !attachmentMap[attachmentIds[i]]){\n      return _formatAttachment(val);\n    }\n    return _formatAttachment(val, attachmentMap[attachmentIds[i]]);\n  }) : [];\n}\n\nfunction formatDeltaMessage(m){\n  var md = m.delta.messageMetadata;\n  return {\n    type: \"message\",\n    senderID: md.actorFbId,\n    body: m.delta.body,\n    threadID: (md.threadKey.threadFbId || md.threadKey.otherUserFbId).toString(),\n    messageID: md.messageId,\n    attachments: (m.delta.attachments || []).map(v => _formatAttachment(v)),\n    timestamp: md.timestamp,\n    isGroup: !!md.threadKey.threadFbId\n  }\n}\n\nfunction formatMessage(m) {\n  var originalMessage = m.message ? m.message : m;\n  var obj = {\n    type: \"message\",\n    senderName: originalMessage.sender_name,\n    senderID: originalMessage.sender_fbid.toString(),\n    participantNames: (originalMessage.group_thread_info ? originalMessage.group_thread_info.participant_names : [originalMessage.sender_name.split(' ')[0]]),\n    participantIDs: (originalMessage.group_thread_info ? originalMessage.group_thread_info.participant_ids.map(function(v) {return v.toString();}) : [originalMessage.sender_fbid]),\n    body: originalMessage.body,\n    threadID: originalMessage.tid && originalMessage.tid.split(\".\")[0] === \"id\" ? originalMessage.tid.split('.')[1] : originalMessage.thread_fbid || originalMessage.other_user_fbid,\n    threadName: (originalMessage.group_thread_info ? originalMessage.group_thread_info.name : originalMessage.sender_name),\n    location: originalMessage.coordinates ? originalMessage.coordinates : null,\n    messageID: originalMessage.mid ? originalMessage.mid.toString() : originalMessage.message_id,\n    attachments: formatAttachment(originalMessage.attachments, originalMessage.attachmentIds, originalMessage.attachment_map, originalMessage.share_map),\n    timestamp: originalMessage.timestamp,\n    timestampAbsolute: originalMessage.timestamp_absolute,\n    timestampRelative: originalMessage.timestamp_relative,\n    timestampDatetime: originalMessage.timestamp_datetime,\n    tags: originalMessage.tags \n  };\n\n  if(m.type === \"pages_messaging\") obj.pageID = m.realtime_viewer_fbid.toString();\n  obj.isGroup = obj.participantIDs.length > 2;\n\n  return obj;\n}\n\nfunction formatEvent(m) {\n  var logMessageType;\n  var logMessageData;\n\n  // log:thread-color => {theme_color}\n  // log:user-nickname => {participant_id, nickname}\n  // log:thread-icon => {thread_icon}\n  // log:thread-name => {name}\n  // log:subscribe => {addedParticipants - [Array]}\n  // log:unsubscribe => {leftParticipantFbId}\n\n  switch (m.class) {\n    case 'AdminTextMessage':\n      logMessageData = m.untypedData;\n      switch (m.type) {\n        case 'change_thread_theme':\n          logMessageType = \"log:thread-color\";\n          break;\n        case 'change_thread_nickname':\n          logMessageType = \"log:user-nickname\";\n          break;\n        case 'change_thread_icon':\n          logMessageType = \"log:thread-icon\";\n          break;\n      }\n      break;\n    case 'ThreadName':\n      logMessageType = \"log:thread-name\";\n      logMessageData = { name: m.name };\n      break;\n    case 'ParticipantsAddedToGroupThread':\n      logMessageType = \"log:subscribe\";\n      logMessageData = { addedParticipants: m.addedParticipants }\n      break;\n    case 'ParticipantLeftGroupThread':\n      logMessageType = \"log:unsubscribe\";\n      logMessageData = { leftParticipantFbId: m.leftParticipantFbId }\n      break;\n  }\n\n  return {\n    type: \"event\",\n    threadID: m.messageMetadata.threadKey.threadFbId || m.messageMetadata.threadKey.otherUserFbId,\n    logMessageType: logMessageType,\n    logMessageData: logMessageData,\n    logMessageBody: m.messageMetadata.adminText,\n    author: m.messageMetadata.actorFbId\n  };\n}\n\nfunction formatTyp(event) {\n  return {\n    isTyping: !!event.st,\n    from: event.from.toString(),\n    threadID: (event.to || event.thread_fbid || event.from).toString(),\n    // When receiving typ indication from mobile, `from_mobile` isn't set.\n    // If it is, we just use that value.\n    fromMobile: event.hasOwnProperty('from_mobile') ? event.from_mobile : true,\n    userID: (event.realtime_viewer_fbid || event.from).toString(),\n    type: 'typ',\n  };\n}\n\nfunction formatReadReceipt(event) {\n  return {\n    reader: event.reader.toString(),\n    time: event.time,\n    threadID: (event.thread_fbid || event.reader).toString(),\n    type: 'read_receipt',\n  };\n}\n\nfunction formatRead(event) {\n  return {\n    threadID: ((event.chat_ids && event.chat_ids[0]) || (event.thread_fbids && event.thread_fbids[0])).toString(),\n    time: event.timestamp,\n    type: 'read'\n  };\n}\n\nfunction getFrom(str, startToken, endToken) {\n  var start = str.indexOf(startToken) + startToken.length;\n  if(start < startToken.length) return \"\";\n\n  var lastHalf = str.substring(start);\n  var end = lastHalf.indexOf(endToken);\n  if (end === -1) {\n    throw Error(\"Could not find endTime `\" + endToken + \"` in the given string.\");\n  }\n  return lastHalf.substring(0, end);\n}\n\nfunction makeParsable(html) {\n  return html.replace(/for\\s*\\(\\s*;\\s*;\\s*\\)\\s*;\\s*/, \"\");\n}\n\nfunction arrToForm(form) {\n  return arrayToObject(form, function(v) {return v.name;}, function(v) {return v.val;});\n}\n\nfunction arrayToObject(arr, getKey, getValue) {\n  return arr.reduce(function(acc, val) {\n    acc[getKey(val)] = getValue(val);\n    return acc;\n  }, {});\n}\n\nfunction getSignatureID(){\n  return Math.floor(Math.random() * 2147483648).toString(16);\n}\n\nfunction generateTimestampRelative() {\n  var d = new Date();\n  return d.getHours() + \":\" + padZeros(d.getMinutes());\n}\n\nfunction makeDefaults(html, userID) {\n  var reqCounter = 1;\n  var fb_dtsg = getFrom(html, \"name=\\\"fb_dtsg\\\" value=\\\"\", \"\\\"\");\n  var ttstamp = \"\";\n  for (var i = 0; i < fb_dtsg.length; i++) {\n    ttstamp += fb_dtsg.charCodeAt(i);\n  }\n  ttstamp += '2';\n  var revision = getFrom(html, \"revision\\\":\",\",\");\n\n  function mergeWithDefaults(obj) {\n    var newObj = {\n      __user: userID,\n      __req: (reqCounter++).toString(36),\n      __rev: revision,\n      __a: 1,\n      fb_dtsg: fb_dtsg,\n      ttstamp: ttstamp,\n    };\n\n    if(!obj) return newObj;\n\n    for(var prop in obj) {\n      if(obj.hasOwnProperty(prop)) {\n        if (!newObj[prop]) {\n          newObj[prop] = obj[prop];\n        }\n      }\n    }\n\n    return newObj;\n  }\n\n  function postWithDefaults(url, jar, form) {\n    return post(url, jar, mergeWithDefaults(form));\n  }\n\n  function getWithDefaults(url, jar, qs) {\n    return get(url, jar, mergeWithDefaults(qs));\n  }\n\n  function postFormDataWithDefault(url, jar, form, qs) {\n    return postFormData(url, jar, mergeWithDefaults(form), mergeWithDefaults(qs));\n  }\n\n  return {\n    get: getWithDefaults,\n    post: postWithDefaults,\n    postFormData: postFormDataWithDefault,\n  };\n}\n\nfunction parseAndCheckLogin(jar, defaultFuncs) {\n  return function(data) {\n    return bluebird.try(function() {\n      log.verbose(\"parseAndCheckLogin\", data.body);\n      if (data.statusCode >= 500 && data.statusCode < 600) {\n        log.warn(\"parseAndCheckLogin\", \"Got status code \" + data.statusCode + \" retrying...\");\n        var url = data.request.uri.protocol + \"//\" + data.request.uri.hostname + data.request.uri.pathname;\n        if (data.request.headers['Content-Type'].split(\";\")[0] === \"multipart/form-data\") {\n          return defaultFuncs\n            .postFormData(url, jar, data.request.formData, {})\n            .then(parseAndCheckLogin(jar));\n        } else {\n          return defaultFuncs\n            .post(url, jar, data.request.formData)\n            .then(parseAndCheckLogin(jar));\n        }\n      }\n      if (data.statusCode !== 200) throw new Error(\"parseAndCheckLogin got status code: \" + data.statusCode + \". Bailing out of trying to parse response.\");\n\n      var res = null;\n      try {\n        res = JSON.parse(makeParsable(data.body));\n      } catch(e) {\n        throw {\n          error: \"JSON.parse error. Check the `detail` property on this error.\",\n          detail: e,\n          res: data.body\n        };\n      }\n\n      // TODO: handle multiple cookies?\n      if (res.jsmods\n          && res.jsmods.require\n          && Array.isArray(res.jsmods.require[0])\n          && res.jsmods.require[0][0] === \"Cookie\") {\n        res.jsmods.require[0][3][0] = res.jsmods.require[0][3][0].replace(\"_js_\", \"\");\n        var cookie = formatCookie(res.jsmods.require[0][3], \"facebook\");\n        var cookie2 = formatCookie(res.jsmods.require[0][3], \"messenger\");\n        jar.setCookie(cookie, \"https://www.facebook.com\");\n        jar.setCookie(cookie2, \"https://www.messenger.com\");\n      }\n\n      if (res.error === 1357001) {\n        throw {error: \"Not logged in.\"};\n      }\n      return res;\n    });\n  };\n}\n\nfunction saveCookies(jar) {\n  return function(res) {\n    var cookies = res.headers['set-cookie'] || [];\n    cookies.forEach(function (c) {\n      if (c.indexOf(\".facebook.com\") > -1) {\n        jar.setCookie(c, \"https://www.facebook.com\");\n      }\n      var c2 = c.replace(/domain=\\.facebook\\.com/, \"domain=.messenger.com\");\n      jar.setCookie(c2, \"https://www.messenger.com\");\n    });\n    return res;\n  };\n}\n\nvar NUM_TO_MONTH = [\n  'Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'\n];\nvar NUM_TO_DAY = [\n  'Sun','Mon','Tue','Wed','Thu','Fri','Sat'\n];\nfunction formatDate(date) {\n  var d = date.getUTCDate(); d = d >= 10 ? d : '0'+d;\n  var h = date.getUTCHours(); h = h >= 10 ? h : '0'+h;\n  var m = date.getUTCMinutes(); m = m >= 10 ? m : '0'+m;\n  var s = date.getUTCSeconds(); s = s >= 10 ? s : '0'+s;\n  return NUM_TO_DAY[date.getUTCDay()] + ', ' +\n    d+' '+ NUM_TO_MONTH[date.getUTCMonth()] +' '+ date.getUTCFullYear() +' '+\n    h+':'+m+':'+s+' GMT';\n}\n\nfunction formatCookie(arr, url) {\n  return arr[0]+\"=\"+arr[1]+\"; Path=\" + arr[3] + \"; Domain=\"+url+\".com\";\n}\n\nfunction formatThread(data) {\n  return {\n    threadID: data.thread_fbid.toString(),\n    participants: data.participants.map(function(v) { return v.replace('fbid:', ''); }),\n    participantIDs: data.participants.map(function(v) { return v.replace('fbid:', ''); }),\n    formerParticipants: data.former_participants,\n    name: data.name,\n    nicknames: data.custom_nickname,\n    snippet: data.snippet,\n    snippetHasAttachment: data.snippet_has_attachment,\n    snippetAttachments: data.snippet_attachments,\n    snippetSender: (data.snippet_sender || '').replace('fbid:', ''),\n    unreadCount: data.unread_count,\n    messageCount: data.message_count,\n    imageSrc: data.image_src,\n    timestamp: data.timestamp,\n    serverTimestamp: data.server_timestamp, // what is this?\n    muteSettings: data.muteSettings,\n    isCanonicalUser: data.is_canonical_user,\n    isCanonical: data.is_canonical,\n    canonicalFbid: data.canonical_fbid,\n    isSubscribed: data.is_subscribed,\n    rootMessageThreadingID: data.root_message_threading_id,\n    folder: data.folder,\n    isArchived: data.is_archived,\n    recipientsLoadable: data.recipients_loadable,\n    hasEmailParticipant: data.has_email_participant,\n    readOnly: data.read_only,\n    canReply: data.can_reply,\n    composerEnabled: data.composer_enabled,\n    blockedParticipants: data.blocked_participants,\n    lastMessageID: data.last_message_id\n  };\n}\n\n\nfunction getType(obj) {\n  return Object.prototype.toString.call(obj).slice(8, -1);\n}\n\nfunction formatPresence(presence, userID) {\n  return {\n    type: \"presence\",\n    timestamp: presence.la * 1000,\n    userID: userID,\n    statuses: presence.a\n  };\n}\n\nfunction getAppState(jar){\n  return jar\n    .getCookies(\"https://www.facebook.com\")\n    .concat(jar.getCookies(\"https://facebook.com\"))\n    .concat(jar.getCookies(\"https://www.messenger.com\"));\n}\n\nmodule.exports = {\n  isReadableStream: isReadableStream,\n  get: get,\n  post: post,\n  postFormData: postFormData,\n  generateThreadingID: generateThreadingID,\n  generateOfflineThreadingID: generateOfflineThreadingID,\n  getGUID: getGUID,\n  getFrom: getFrom,\n  makeParsable: makeParsable,\n  arrToForm: arrToForm,\n  getSignatureID: getSignatureID,\n  getJar: request.jar,\n  generateTimestampRelative: generateTimestampRelative,\n  makeDefaults: makeDefaults,\n  parseAndCheckLogin: parseAndCheckLogin,\n  saveCookies: saveCookies,\n  getType: getType,\n  formatMessage: formatMessage,\n  formatDeltaMessage: formatDeltaMessage,\n  formatEvent: formatEvent,\n  formatPresence: formatPresence,\n  formatTyp: formatTyp,\n  formatCookie: formatCookie,\n  formatThread: formatThread,\n  formatReadReceipt: formatReadReceipt,\n  formatRead: formatRead,\n  generatePresence: generatePresence,\n  generateAccessiblityCookie: generateAccessiblityCookie,\n  formatDate: formatDate,\n  getAppState: getAppState,\n};\n","/home/travis/build/npmtest/node-npmtest-facebook-chat-api/node_modules/facebook-chat-api/src/addUserToGroup.js":"\"use strict\";\n\nvar utils = require(\"../utils\");\nvar log = require(\"npmlog\");\n\nmodule.exports = function(defaultFuncs, api, ctx) {\n  return function addUserToGroup(userID, threadID, callback) {\n    if(!callback && utils.getType(threadID) === 'Function') {\n      throw {error: \"please pass a threadID as a second argument.\"};\n    }\n\n    if(!callback) {\n      callback = function() {};\n    }\n\n    if (utils.getType(threadID) !== \"Number\" && utils.getType(threadID) !== \"String\") {\n      throw {error: \"ThreadID should be of type Number or String and not \" + utils.getType(threadID) + \".\"};\n    }\n\n    if (utils.getType(userID) !== \"Array\") {\n      userID = [userID];\n    }\n\n    var messageAndOTID = utils.generateOfflineThreadingID();\n    var form = {\n      'client' : 'mercury',\n      'action_type' : 'ma-type:log-message',\n      'author' : 'fbid:' + ctx.userID,\n      'thread_id' : '',\n      'timestamp' : Date.now(),\n      'timestamp_absolute' : 'Today',\n      'timestamp_relative' : utils.generateTimestampRelative(),\n      'timestamp_time_passed' : '0',\n      'is_unread' : false,\n      'is_cleared' : false,\n      'is_forward' : false,\n      'is_filtered_content' : false,\n      'is_filtered_content_bh':false,\n      'is_filtered_content_account':false,\n      'is_spoof_warning' : false,\n      'source' : 'source:chat:web',\n      'source_tags[0]' : 'source:chat',\n      'log_message_type' : 'log:subscribe',\n      'status' : '0',\n      'offline_threading_id' : messageAndOTID,\n      'message_id' : messageAndOTID,\n      'threading_id': utils.generateThreadingID(ctx.clientID),\n      'manual_retry_cnt' : '0',\n      'thread_fbid' : threadID,\n    };\n\n    for (var i = 0; i < userID.length; i++){\n      if (utils.getType(userID[i]) !== \"Number\" && utils.getType(userID[i]) !== \"String\") {\n        throw {error: \"Elements of userID should be of type Number or String and not \" + utils.getType(userID[i]) + \".\"};\n      }\n\n      form['log_message_data[added_participants]['+i+']'] = 'fbid:' + userID[i];\n    }\n\n    defaultFuncs.post(\"https://www.facebook.com/messaging/send/\", ctx.jar, form)\n    .then(utils.parseAndCheckLogin(ctx.jar, defaultFuncs))\n    .then(function(resData) {\n      if (!resData) {\n        throw {error: \"Add to group failed.\"};\n      }\n      if(resData.error) {\n        throw resData;\n      }\n\n      return callback();\n    })\n    .catch(function(err) {\n      log.error(\"addUserToGroup\", err);\n      return callback(err);\n    });\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-facebook-chat-api/node_modules/facebook-chat-api/src/changeArchivedStatus.js":"\"use strict\";\n\nvar utils = require(\"../utils\");\nvar log = require(\"npmlog\");\n\nmodule.exports = function(defaultFuncs, api, ctx) {\n  return function changeArchivedStatus(threadOrThreads, archive, callback) {\n    if(!callback) {\n      callback = function(){};\n    }\n\n    var form = {};\n\n    if(utils.getType(threadOrThreads) === \"Array\") {\n      for (var i = 0; i < threadOrThreads.length; i++) {\n        form['ids[' + threadOrThreads[i] + ']'] = archive;\n      }\n    } else {\n      form['ids[' + threadOrThreads + ']'] = archive;\n    }\n\n    defaultFuncs\n      .post(\"https://www.facebook.com/ajax/mercury/change_archived_status.php\", ctx.jar, form)\n      .then(utils.parseAndCheckLogin(ctx.jar, defaultFuncs))\n      .then(function(resData) {\n        if (resData.error) {\n          throw resData;\n        }\n\n        return callback();\n      })\n      .catch(function(err) {\n        log.error(\"changeArchivedStatus\", err);\n        return callback(err);\n      });\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-facebook-chat-api/node_modules/facebook-chat-api/src/changeBlockedStatus.js":"\"use strict\";\r\n\r\nvar utils = require(\"../utils\");\r\nvar log = require(\"npmlog\");\r\n\r\nmodule.exports = function (defaultFuncs, api, ctx) {\r\n  return function changeBlockedStatus(userID, block, callback) {\r\n\r\n    if (!callback) {\r\n      callback = function () { };\r\n    }\r\n    if (block) {\r\n      defaultFuncs\r\n        .post(\"https://www.facebook.com/nfx/block_messages/?thread_fbid=\" + userID + \"&location=www_chat_head\", ctx.jar, {})\r\n        .then(utils.saveCookies(ctx.jar))\r\n        .then(utils.parseAndCheckLogin(ctx.jar, defaultFuncs))\r\n        .then(function (resData) {\r\n          if (resData.error) {\r\n            throw resData;\r\n          }\r\n          defaultFuncs\r\n            .post(\"https://www.facebook.com\" + /action=\"(.+?)\"+?/.exec(resData.jsmods.markup[0][1].__html)[1].replace(/&amp;/g, \"&\"), ctx.jar, {})\r\n            .then(utils.saveCookies(ctx.jar))\r\n            .then(utils.parseAndCheckLogin(ctx.jar, defaultFuncs))\r\n            .then(function (_resData) {\r\n              if (_resData.error) {\r\n                throw _resData;\r\n              }\r\n              return callback();\r\n            })\r\n        })\r\n        .catch(function (err) {\r\n          log.error(\"changeBlockedStatus\", err);\r\n          return callback(err);\r\n        });\r\n    }\r\n    else {\r\n\r\n      defaultFuncs\r\n        .post(\"https://www.facebook.com/ajax/nfx/messenger_undo_block.php?story_location=messenger&context=%7B%22reportable_ent_token%22%3A%22\" + userID + \"%22%2C%22initial_action_name%22%3A%22BLOCK_MESSAGES%22%7D&\", ctx.jar, {})\r\n        .then(utils.saveCookies(ctx.jar))\r\n        .then(utils.parseAndCheckLogin(ctx.jar, defaultFuncs))\r\n        .then(function (resData) {\r\n          if (resData.error) {\r\n            throw resData;\r\n          }\r\n\r\n          return callback();\r\n        })\r\n        .catch(function (err) {\r\n          log.error(\"changeBlockedStatus\", err);\r\n          return callback(err);\r\n        });\r\n\r\n    }\r\n  }\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-facebook-chat-api/node_modules/facebook-chat-api/src/changeGroupImage.js":"\"use strict\";\n\nvar utils = require(\"../utils\");\nvar log = require(\"npmlog\");\nvar bluebird = require(\"bluebird\");\n\nmodule.exports = function(defaultFuncs, api, ctx) {\n  function handleUpload(image, callback) {\n    var uploads = [];\n\n    var form = {\n      'images_only': 'true',\n      'attachment[]': image,\n    };\n\n    uploads.push(defaultFuncs\n      .postFormData(\"https://upload.facebook.com/ajax/mercury/upload.php\", ctx.jar, form, {})\n      .then(utils.parseAndCheckLogin(ctx.jar, defaultFuncs))\n      .then(function (resData) {\n        if (resData.error) {\n          throw resData;\n        }\n\n        return resData.payload.metadata[0];\n      }));\n\n    // resolve all promises\n    bluebird\n      .all(uploads)\n      .then(function(resData) {\n        callback(null, resData);\n      })\n      .catch(function(err) {\n        log.error(\"handleUpload\", err);\n        return callback(err);\n      });\n  }\n\n  return function changeGroupImage(image, threadID, callback) {\n    if(!callback && utils.getType(threadID) === 'Function') {\n      throw {error: \"please pass a threadID as a second argument.\"};\n    }\n\n    if(!callback) {\n      callback = function() {};\n    }\n\n    var messageAndOTID = utils.generateOfflineThreadingID();\n    var form = {\n      'client' : 'mercury',\n      'action_type' : 'ma-type:log-message',\n      'author' : 'fbid:' + ctx.userID,\n      'author_email' : '',\n      'ephemeral_ttl_mode' : '0',\n      'is_filtered_content' : false,\n      'is_filtered_content_account' : false,\n      'is_filtered_content_bh' : false,\n      'is_filtered_content_invalid_app' : false,\n      'is_filtered_content_quasar' : false,\n      'is_forward' : false,\n      'is_spoof_warning' : false,\n      'is_unread' : false,\n      'log_message_type' : 'log:thread-image',\n      'manual_retry_cnt' : '0',\n      'message_id' : messageAndOTID,\n      'offline_threading_id' : messageAndOTID,\n      'source' : 'source:chat:web',\n      'source_tags[0]' : 'source:chat',\n      'status' : '0',\n      'thread_fbid' : threadID,\n      'thread_id' : '',\n      'timestamp' : Date.now(),\n      'timestamp_absolute' : 'Today',\n      'timestamp_relative' : utils.generateTimestampRelative(),\n      'timestamp_time_passed' : '0',\n    };\n\n    handleUpload(image, function (err, payload) {\n      if (err) {\n        return callback(err);\n      }\n\n      form['log_message_data[image][fbid]'] = payload[0]['fbid'];\n      form['log_message_data[image][filename]'] = payload[0]['filename'];\n      form['log_message_data[image][filetype]'] = payload[0]['filetype'];\n      form['log_message_data[image][image_id]'] = payload[0]['image_id'];\n      form['log_message_data[image][src]'] = payload[0]['src'];\n\n      defaultFuncs\n        .post(\"https://www.facebook.com/messaging/send/\", ctx.jar, form)\n        .then(utils.parseAndCheckLogin(ctx.jar, defaultFuncs))\n        .then(function(resData) {\n          // check for errors here\n\n          if (resData.error) {\n            throw resData;\n          }\n\n          return callback();\n        })\n        .catch(function(err) {\n          log.error(\"changeGroupImage\", err);\n          return callback(err);\n        });\n\n    });\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-facebook-chat-api/node_modules/facebook-chat-api/src/changeNickname.js":"\"use strict\";\n\nvar utils = require(\"../utils\");\nvar log = require(\"npmlog\");\n\nmodule.exports = function(defaultFuncs, api, ctx) {\n  return function changeNickname(nickname, threadID, participantID, callback) {\n    callback = callback || function() {};\n\n    var form = {\n      'nickname': nickname,\n      'participant_id': participantID,\n      'thread_or_other_fbid': threadID\n    };\n\n    defaultFuncs\n      .post(\"https://www.messenger.com/messaging/save_thread_nickname/?source=thread_settings&dpr=1\", ctx.jar, form)\n      .then(utils.parseAndCheckLogin(ctx.jar, defaultFuncs))\n      .then(function(resData) {\n        if (resData.error === 1545014) {\n          throw {error: \"Trying to change nickname of user isn't in thread\"};\n        }\n        if (resData.error === 1357031) {\n          throw {error: \"Trying to change user nickname of a thread that doesn't exist. Have at least one message in the thread before trying to change the user nickname.\"};\n        }\n        if (resData.error) {\n          throw resData;\n        }\n\n        return callback();\n      })\n      .catch(function(err) {\n        log.error(\"changeNickname\", err);\n        return callback(err);\n      });\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-facebook-chat-api/node_modules/facebook-chat-api/src/changeThreadColor.js":"\"use strict\";\n\nvar utils = require(\"../utils\");\nvar log = require(\"npmlog\");\n\nmodule.exports = function(defaultFuncs, api, ctx) {\n  return function changeThreadColor(color, threadID, callback) {\n    if(!callback) {\n      callback = function() {};\n    }\n    var form = {\n      'color_choice' : color,\n      'thread_or_other_fbid' : threadID\n    };\n\n    defaultFuncs\n      .post(\"https://www.messenger.com/messaging/save_thread_color/?source=thread_settings&dpr=1\", ctx.jar, form)\n      .then(utils.parseAndCheckLogin(ctx.jar, defaultFuncs))\n      .then(function(resData) {\n        if (resData.error === 1357031) {\n          throw {error: \"Trying to change colors of a chat that doesn't exist. Have at least one message in the thread before trying to change the colors.\"};\n        }\n        if (resData.error) {\n          throw resData;\n        }\n\n        return callback();\n      })\n      .catch(function(err) {\n        log.error(\"changeThreadColor\", err);\n        return callback(err);\n      });\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-facebook-chat-api/node_modules/facebook-chat-api/src/changeThreadEmoji.js":"\"use strict\";\n\nvar utils = require(\"../utils\");\nvar log = require(\"npmlog\");\n\nmodule.exports = function(defaultFuncs, api, ctx) {\n  return function changeThreadEmoji(emoji, threadID, callback) {\n    if(!callback) {\n      callback = function() {};\n    }\n    var form = {\n      'emoji_choice' : emoji,\n      'thread_or_other_fbid' : threadID\n    };\n\n    defaultFuncs\n      .post(\"https://www.messenger.com/messaging/save_thread_emoji/?source=thread_settings&__pc=EXP1%3Amessengerdotcom_pkg\", ctx.jar, form)\n      .then(utils.parseAndCheckLogin(ctx.jar, defaultFuncs))\n      .then(function(resData) {\n        if (resData.error === 1357031) {\n          throw {error: \"Trying to change emoji of a chat that doesn't exist. Have at least one message in the thread before trying to change the emoji.\"};\n        }\n        if (resData.error) {\n          throw resData;\n        }\n\n        return callback();\n      })\n      .catch(function(err) {\n        log.error(\"changeThreadEmoji\", err);\n        return callback(err);\n      });\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-facebook-chat-api/node_modules/facebook-chat-api/src/createPoll.js":"\"use strict\";\n\nvar utils = require(\"../utils\");\nvar log = require(\"npmlog\");\n\nmodule.exports = function(defaultFuncs, api, ctx) {\n  return function createPoll(title, threadID, options, callback) {\n    if(!callback) {\n      if(utils.getType(options) == \"Function\") {\n        callback = options;\n      } else {\n        callback = function() {};\n      }\n    }\n    if(!options) {\n      options = {}; // Initial poll options are optional\n    }\n\n    var form = {\n      'target_id' : threadID,\n      'question_text' : title\n    };\n\n    // Set fields for options (and whether they are selected initially by the posting user)\n    var ind = 0;\n    for(var opt in options) {\n      if(options.hasOwnProperty(opt)) {\n        form['option_text_array[' + ind + ']'] = encodeURIComponent(opt);\n        form['option_is_selected_array[' + ind + ']'] = (options[opt] ? '1' : '0');\n        ind++;\n      }\n    }\n\n    defaultFuncs\n      .post(\"https://www.messenger.com/messaging/group_polling/create_poll/?dpr=1\", ctx.jar, form)\n      .then(utils.parseAndCheckLogin(ctx.jar, defaultFuncs))\n      .then(function(resData) {\n        if (resData.payload.status != 'success') {\n          throw resData;\n        }\n\n        return callback();\n      })\n      .catch(function(err) {\n        log.error(\"createPoll\", err);\n        return callback(err);\n      });\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-facebook-chat-api/node_modules/facebook-chat-api/src/deleteMessage.js":"\"use strict\";\n\nvar utils = require(\"../utils\");\nvar log = require(\"npmlog\");\n\nmodule.exports = function(defaultFuncs, api, ctx) {\n  return function deleteMessage(messageOrMessages, callback) {\n    if(!callback) {\n      callback = function(){};\n    }\n\n    var form = {\n      client: 'mercury',\n    };\n\n    if(utils.getType(messageOrMessages) !== \"Array\") {\n      messageOrMessages = [messageOrMessages];\n    }\n\n    for (var i = 0; i < messageOrMessages.length; i++) {\n      form['message_ids[' + i + ']'] = messageOrMessages[i];\n    }\n\n    defaultFuncs\n      .post(\"https://www.facebook.com/ajax/mercury/delete_messages.php\", ctx.jar, form)\n      .then(utils.parseAndCheckLogin(ctx.jar, defaultFuncs))\n      .then(function(resData) {\n        if (resData.error) {\n          throw resData;\n        }\n\n        return callback();\n      })\n      .catch(function(err) {\n        log.error(\"deleteMessage\", err);\n        return callback(err);\n      });\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-facebook-chat-api/node_modules/facebook-chat-api/src/deleteThread.js":"\"use strict\";\n\nvar utils = require(\"../utils\");\nvar log = require(\"npmlog\");\n\nmodule.exports = function(defaultFuncs, api, ctx) {\n  return function deleteThread(threadOrThreads, callback) {\n    if(!callback) {\n      callback = function(){};\n    }\n\n    var form = {\n      client: 'mercury',\n    };\n\n    if(utils.getType(threadOrThreads) !== \"Array\") {\n      threadOrThreads = [threadOrThreads];\n    }\n\n    for (var i = 0; i < threadOrThreads.length; i++) {\n      form['ids[' + i + ']'] = threadOrThreads[i];\n    }\n\n    defaultFuncs\n      .post(\"https://www.facebook.com/ajax/mercury/delete_thread.php\", ctx.jar, form)\n      .then(utils.parseAndCheckLogin(ctx.jar, defaultFuncs))\n      .then(function(resData) {\n        if (resData.error) {\n          throw resData;\n        }\n\n        return callback();\n      })\n      .catch(function(err) {\n        log.error(\"deleteThread\", err);\n        return callback(err);\n      });\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-facebook-chat-api/node_modules/facebook-chat-api/src/getCurrentUserID.js":"\"use strict\";\n\nmodule.exports = function(defaultFuncs, api, ctx) {\n  return function getCurrentUserID() {\n    return ctx.userID;\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-facebook-chat-api/node_modules/facebook-chat-api/src/getFriendsList.js":"\"use strict\";\n\nvar cheerio = require(\"cheerio\");\nvar utils = require(\"../utils\");\nvar log = require(\"npmlog\");\n\n// [almost] copy pasted from one of FB's minified file (GenderConst)\nvar GENDERS = {\n  0: 'unknown',\n  1: 'female_singular',\n  2: 'male_singular',\n  3: 'female_singular_guess',\n  4: 'male_singular_guess',\n  5: 'mixed',\n  6: 'neuter_singular',\n  7: 'unknown_singular',\n  8: 'female_plural',\n  9: 'male_plural',\n  10: 'neuter_plural',\n  11: 'unknown_plural',\n};\n\nfunction formatData(obj) {\n  return Object.keys(obj).map(function(key) {\n    var user = obj[key];\n    return {\n      alternateName: user.alternateName,\n      firstName: user.firstName,\n      gender: GENDERS[user.gender],\n      userID: user.id.toString(),\n      isFriend: (user.is_friend != null && user.is_friend) ? true : false,\n      fullName: user.name,\n      profilePicture: user.thumbSrc,\n      type: user.type,\n      profileUrl: user.uri,\n      vanity: user.vanity,\n      isBirthday: !!user.is_birthday,\n    }\n  });\n}\n\nmodule.exports = function(defaultFuncs, api, ctx) {\n  return function getFriendsList(callback) {\n    if(!callback) {\n      throw {error: \"getFriendsList: need callback\"};\n    }\n\n    defaultFuncs\n      .postFormData(\"https://www.facebook.com/chat/user_info_all\", ctx.jar, {}, {viewer: ctx.userID})\n      .then(utils.parseAndCheckLogin(ctx.jar, defaultFuncs))\n      .then(function(resData) {\n        if (!resData) {\n          throw {error: \"getFriendsList returned empty object.\"};\n        }\n        if(resData.error) {\n          throw resData;\n        }\n        callback(null, formatData(resData.payload));\n      })\n      .catch(function(err) {\n        log.error(\"getFriendsList\", err);\n        return callback(err);\n      });\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-facebook-chat-api/node_modules/facebook-chat-api/src/getThreadHistory.js":"\"use strict\";\n\nvar utils = require(\"../utils\");\nvar log = require(\"npmlog\");\n\nmodule.exports = function(defaultFuncs, api, ctx) {\n  return function getThreadHistory(threadID, start, end, timestamp, callback) {\n    if(!callback) {\n      throw {error: \"getThreadHistory: need callback\"};\n    }\n\n    var form = {\n      'client' : 'mercury'\n    };\n\n    api.getUserInfo(threadID, function(err, res) {\n      if(err) {\n        return callback(err);\n      }\n      var key = (Object.keys(res).length > 0) ? \"user_ids\" : \"thread_fbids\";\n        form['messages['+key+'][' + threadID + '][offset]'] = start;\n        form['messages['+key+'][' + threadID + '][timestamp]'] = timestamp;\n        form['messages['+key+'][' + threadID + '][limit]'] = end - start;\n\n        if(ctx.globalOptions.pageID) form.request_user_id = ctx.globalOptions.pageID;\n\n        defaultFuncs.post(\"https://www.facebook.com/ajax/mercury/thread_info.php\", ctx.jar, form)\n        .then(utils.parseAndCheckLogin(ctx.jar, defaultFuncs))\n        .then(function(resData) {\n          if (resData.error) {\n            throw resData;\n          } else if (!resData.payload){\n            throw {error: \"Could not retrieve thread history.\"};\n          }\n\n          // Asking for message history from a thread with no message history\n          // will return undefined for actions here\n          if (!resData.payload.actions) {\n            resData.payload.actions = []\n          }\n\n          var userIDs = {};\n          resData.payload.actions.forEach(function(v) {\n            userIDs[v.author.split(\":\").pop()] = \"\";\n          });\n\n          api.getUserInfo(Object.keys(userIDs), function(err, data){\n            if (err) return callback(err); //callback({error: \"Could not retrieve user information in getThreadHistory.\"});\n\n            resData.payload.actions.forEach(function (v) {\n              v.sender_name = data[v.author.split(\":\").pop()].name;\n              v.sender_fbid = v.author;\n              delete v.author;\n            });\n\n            callback(null, resData.payload.actions.map(utils.formatMessage));\n          });\n        })\n        .catch(function(err) {\n          log.error(\"getThreadHistory\", err);\n          return callback(err);\n        });\n    });\n\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-facebook-chat-api/node_modules/facebook-chat-api/src/getThreadInfo.js":"\"use strict\";\n\nvar utils = require(\"../utils\");\nvar log = require(\"npmlog\");\n\nmodule.exports = function(defaultFuncs, api, ctx) {\n  return function getThreadInfo(threadID, callback) {\n    if (!callback) callback = function() {};\n\n    var form = {\n      'client': 'mercury'\n    };\n\n    api.getUserInfo(threadID, function(err, userRes) {\n      if (err) {\n        return callback(err);\n      }\n      var key = (Object.keys(userRes).length > 0) ? \"user_ids\" : \"thread_fbids\";\n      form['threads[' + key + '][0]'] = threadID;\n\n      if (ctx.globalOptions.pageId) form.request_user_id = ctx.globalOptions.pageId;\n\n      defaultFuncs.post(\"https://www.facebook.com/ajax/mercury/thread_info.php\", ctx.jar, form)\n        .then(utils.parseAndCheckLogin(ctx.jar, defaultFuncs))\n        .then(function(resData) {\n          if (resData.error) {\n            throw resData;\n          } else if (!resData.payload) {\n            throw {\n              error: \"Could not retrieve thread Info.\"\n            };\n          }\n          var threadData = resData.payload.threads[0];\n          var userData = userRes[threadID];\n\n          if (threadData == null) {\n            throw {\n              error: \"ThreadData is null\"\n            };\n          }\n\n          var info = {\n            participantIDs: threadData.participants.map(id => id.split(':').pop()),\n            name: userData != null && userData.name != null ? userData.name : threadData.name,\n            snippet: threadData.snippet,\n            messageCount: threadData.message_count,\n            emoji: threadData.custom_like_icon,\n            nicknames: threadData.custom_nickname,\n            color: threadData.custom_color,\n            lastReadTimestamp: threadData.last_read_timestamp,\n          };\n          callback(null, info);\n\n        }).catch(function(err) {\n          log.error(\"getThreadInfo\", err);\n          return callback(err);\n        });\n    });\n\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-facebook-chat-api/node_modules/facebook-chat-api/src/getThreadList.js":"\"use strict\";\n\nvar utils = require(\"../utils\");\nvar log = require(\"npmlog\");\n\nmodule.exports = function(defaultFuncs, api, ctx) {\n  return function getThreadList(start, end, type, callback) {\n    if (utils.getType(callback) === 'Undefined') {\n      if (utils.getType(end) !== 'Number') {\n        throw {\n          error: \"Please pass a number as a second argument.\"\n        };\n      } else if (utils.getType(type) === 'Function') {\n        callback = type;\n        type = 'inbox'; //default to inbox\n      } else if (utils.getType(type) !== 'String') {\n        throw {\n          error: \"Please pass a String as a third argument. Your options are: inbox, pending, and archived\"\n        };\n      } else {\n        throw {\n          error: \"getThreadList: need callback\"\n        };\n      }\n    }\n\n    if (type === 'archived') {\n      type = 'action:archived';\n    } else if (type !== 'inbox' && type !== 'pending' && type !== 'other') {\n      throw {\n        error: \"type can only be one of the following: inbox, pending, archived, other\"\n      }\n    }\n\n    if (end <= start) end = start + 20;\n\n    var form = {\n      'client': 'mercury'\n    };\n\n    form[type + '[offset]'] = start;\n    form[type + '[limit]'] = end - start;\n\n    if (ctx.globalOptions.pageID) {\n      form.request_user_id = ctx.globalOptions.pageID;\n    }\n\n    defaultFuncs\n      .post(\"https://www.facebook.com/ajax/mercury/threadlist_info.php\", ctx.jar, form)\n      .then(utils.parseAndCheckLogin(ctx.jar, defaultFuncs))\n      .then(function(resData) {\n        if (resData.error) {\n          throw resData;\n        }\n        log.verbose(\"getThreadList\", JSON.stringify(resData.payload.threads));\n        return callback(null, (resData.payload.threads || []).map(utils.formatThread));\n      })\n      .catch(function(err) {\n        log.error(\"getThreadList\", err);\n        return callback(err);\n      });\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-facebook-chat-api/node_modules/facebook-chat-api/src/getThreadPictures.js":"\"use strict\";\n\nvar utils = require(\"../utils\");\nvar log = require(\"npmlog\");\n\nmodule.exports = function(defaultFuncs, api, ctx) {\n  return function getThreadPictures(threadID, offset, limit, callback) {\n    if(!callback) {\n      throw {error: \"getThreadPictures: need callback\"};\n    }\n\n    var form = {\n      'thread_id': threadID,\n      'offset': offset,\n      'limit': limit\n    };\n\n    defaultFuncs\n      .post(\"https://www.facebook.com/ajax/messaging/attachments/sharedphotos.php\", ctx.jar, form)\n      .then(utils.parseAndCheckLogin(ctx.jar, defaultFuncs))\n      .then(function(resData) {\n        if (resData.error) {\n          throw resData;\n        }\n        return Promise.all(resData.payload.imagesData.map(function(image) {\n          form = {\n            'thread_id': threadID,\n            'image_id': image.fbid\n          };\n          return defaultFuncs\n            .post(\"https://www.facebook.com/ajax/messaging/attachments/sharedphotos.php\", ctx.jar, form)\n            .then(utils.parseAndCheckLogin(ctx.jar, defaultFuncs))\n            .then(function(resData) {\n              if (resData.error) {\n                throw resData;\n              }\n              // the response is pretty messy\n              var queryThreadID = resData.jsmods.require[0][3][1].query_metadata.query_path[0].message_thread;\n              var imageData = resData.jsmods.require[0][3][1].query_results[queryThreadID].message_images.edges[0].node.image2;\n              return imageData;\n            });\n        }));\n      })\n      .then(function(resData) {\n        callback(resData);\n      })\n      .catch(function(err) {\n        log.error(\"Error in getThreadPictures\", err);\n        callback(err);\n      });\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-facebook-chat-api/node_modules/facebook-chat-api/src/getUserID.js":"\"use strict\";\n\nvar utils = require(\"../utils\");\nvar log = require(\"npmlog\");\n\nfunction formatData(data) {\n  return {\n    userID: data.uid.toString(),\n    photoUrl: data.photo,\n    indexRank: data.index_rank,\n    name: data.text,\n    isVerified: data.is_verified,\n    profileUrl: data.path,\n    category: data.category,\n    score: data.score,\n  };\n}\n\nmodule.exports = function(defaultFuncs, api, ctx) {\n  return function getUserID(name, callback) {\n    if(!callback) {\n      throw {error: \"getUserID: need callback\"};\n    }\n\n    var form = {\n      'value' : name.toLowerCase(),\n      'viewer' : ctx.userID,\n      'rsp' : \"search\",\n      'context' : \"search\",\n      'path' : \"/home.php\",\n      'request_id' : utils.getGUID(),\n    };\n\n    defaultFuncs\n      .get(\"https://www.facebook.com/ajax/typeahead/search.php\", ctx.jar, form)\n      .then(utils.parseAndCheckLogin(ctx.jar, defaultFuncs))\n      .then(function(resData) {\n        if (resData.error) {\n          throw resData;\n        }\n\n        var data = resData.payload.entries;\n\n        if(data[0].type !== \"user\") {\n          throw {error: \"Couldn't find a user with name \" + name + \". Bes match: \" + data[0].path};\n        }\n\n        callback(null, data.map(formatData));\n      })\n      .catch(function(err) {\n        log.error(\"getUserID\", err);\n        return callback(err);\n      });\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-facebook-chat-api/node_modules/facebook-chat-api/src/getUserInfo.js":"\"use strict\";\n\nvar utils = require(\"../utils\");\nvar log = require(\"npmlog\");\n\nfunction formatData(data) {\n  var retObj = {};\n\n  for (var prop in data) {\n    if (data.hasOwnProperty(prop)) {\n      var innerObj = data[prop];\n      retObj[prop] = {\n        name: innerObj.name,\n        firstName: innerObj.firstName,\n        vanity: innerObj.vanity,\n        thumbSrc: innerObj.thumbSrc,\n        profileUrl: innerObj.uri,\n        gender: innerObj.gender,\n        type: innerObj.type,\n        isFriend: innerObj.is_friend,\n        isBirthday: !!innerObj.is_birthday,\n      }\n    }\n  }\n\n  return retObj;\n}\n\nmodule.exports = function(defaultFuncs, api, ctx) {\n  return function getUserInfo(id, callback) {\n    if(!callback) {\n      throw {error: \"getUserInfo: need callback\"};\n    }\n\n    if(utils.getType(id) !== 'Array') {\n      id = [id];\n    }\n\n    var form = {};\n    id.map(function(v, i) {\n      form[\"ids[\" + i + \"]\"] = v;\n    });\n    defaultFuncs.post(\"https://www.facebook.com/chat/user_info/\", ctx.jar, form)\n    .then(utils.parseAndCheckLogin(ctx.jar, defaultFuncs))\n    .then(function(resData) {\n      if (resData.error) {\n        throw resData;\n      }\n      return callback(null, formatData(resData.payload.profiles));\n    })\n    .catch(function(err) {\n      log.error(\"getUserInfo\", err);\n      return callback(err);\n    });\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-facebook-chat-api/node_modules/facebook-chat-api/src/handleMessageRequest.js":"\"use strict\";\n\nvar utils = require(\"../utils\");\nvar log = require(\"npmlog\");\n\nmodule.exports = function(defaultFuncs, api, ctx) {\n  return function handleMessageRequest(threadID, accept, callback) {\n    if (utils.getType(accept) !== 'Boolean') {\n      throw {\n        error: \"Please pass a boolean as a second argument.\"\n      };\n    }\n\n    if (!callback) {\n      callback = function() {};\n    }\n\n    var form = {\n      client: 'mercury'\n    };\n\n    if (utils.getType(threadID) !== \"Array\") {\n      threadID = [threadID];\n    }\n\n    var messageBox = accept ? \"inbox\" : \"other\";\n\n    for (var i = 0; i < threadID.length; i++) {\n      form[messageBox + '[' + i + ']'] = threadID[i];\n    }\n\n    defaultFuncs\n      .post(\"https://www.facebook.com/ajax/mercury/move_thread.php\", ctx.jar, form)\n      .then(utils.parseAndCheckLogin(ctx.jar, defaultFuncs))\n      .then(function(resData) {\n        if (resData.error) {\n          throw resData;\n        }\n\n        return callback();\n      })\n      .catch(function(err) {\n        log.error(\"handleMessageRequest\", err);\n        return callback(err);\n      });\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-facebook-chat-api/node_modules/facebook-chat-api/src/listen.js":"\"use strict\";\n\nvar utils = require(\"../utils\");\nvar log = require(\"npmlog\");\n\nvar msgsRecv = 0;\nvar identity = function() {};\n\nmodule.exports = function(defaultFuncs, api, ctx) {\n  var currentlyRunning = null;\n  var globalCallback = identity;\n\n  var stopListening = function() {\n    globalCallback = identity;\n    if(currentlyRunning) {\n      clearTimeout(currentlyRunning);\n      currentlyRunning = null;\n    }\n  };\n\n  var prev = Date.now();\n  var tmpPrev = Date.now();\n  var lastSync = Date.now();\n\n  var form = {\n    'channel' : 'p_' + ctx.userID,\n    'seq' : '0',\n    'partition' : '-2',\n    'clientid' : ctx.clientID,\n    'viewer_uid' : ctx.userID,\n    'uid' : ctx.userID,\n    'state' : 'active',\n    'idle' : 0,\n    'cap' : '8',\n    'msgs_recv':msgsRecv\n  };\n\n  /**\n   * Get an object maybe representing an event. Handles events it wants to handle\n   * and returns true if it did handle an event (and called the globalCallback).\n   * Returns false otherwise.\n   */\n  function handleMessagingEvents(event) {\n    switch (event.event) {\n      // \"read_receipt\" event triggers when other people read the user's messages.\n      case 'read_receipt':\n        globalCallback(null, utils.formatReadReceipt(event));\n        return true;\n      // \"read event\" triggers when the user read other people's messages.\n      case 'read':\n        globalCallback(null, utils.formatRead(event));\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  function listen() {\n    if(currentlyRunning == null || !ctx.loggedIn) {\n      return;\n    }\n\n    form.idle = ~~(Date.now() / 1000) - prev;\n    prev = ~~(Date.now() / 1000);\n    var presence = utils.generatePresence(ctx.userID);\n    ctx.jar.setCookie(\"presence=\" + presence + \"; path=/; domain=.facebook.com; secure\", \"https://www.facebook.com\");\n    utils.get(\"https://0-edge-chat.facebook.com/pull\", ctx.jar, form)\n    .then(utils.parseAndCheckLogin(ctx.jar, defaultFuncs))\n    .then(function(resData) {\n      var now = Date.now();\n      log.info(\"listen\", \"Got answer in \" + now - tmpPrev);\n      tmpPrev = now;\n\n      if(resData && resData.t === \"lb\") {\n        form.sticky_token = resData.lb_info.sticky;\n        form.sticky_pool = resData.lb_info.pool;\n      }\n\n      if(resData && resData.t === 'fullReload') {\n        form.seq = resData.seq;\n        delete form.sticky_pool;\n        delete form.sticky_token;\n        var form4 = {\n          'lastSync' : ~~(lastSync/1000),\n        };\n        defaultFuncs.get(\"https://www.facebook.com/notifications/sync/\", ctx.jar, form4)\n        .then(utils.saveCookies(ctx.jar))\n        .then(function() {\n          lastSync = Date.now();\n          var form = {\n            'client' : 'mercury',\n            'folders[0]': 'inbox',\n            'last_action_timestamp' : ~~(Date.now() - 60)\n          };\n          defaultFuncs.post(\"https://www.facebook.com/ajax/mercury/thread_sync.php\", ctx.jar, form)\n          .then(function() {\n            currentlyRunning = setTimeout(listen, 1000);\n          });\n        });\n        return;\n      }\n\n      if(resData.ms) {\n        msgsRecv += resData.ms.length;\n        var atLeastOne = false;\n        resData.ms.sort(function(a, b) {\n          return a.timestamp - b.timestamp;\n        }).forEach(function parsePackets(v) {\n          switch (v.type) {\n            // TODO: 'ttyp' was used before. It changed to 'typ'. We're keeping\n            // both for now but we should remove 'ttyp' at some point.\n            case 'ttyp':\n            case 'typ':\n              if(!ctx.globalOptions.listenEvents ||\n                (!ctx.globalOptions.selfListen && v.from.toString() === ctx.userID)) {\n                return;\n              }\n\n              return globalCallback(null, utils.formatTyp(v));\n              break;\n            case 'buddylist_overlay':\n              // TODO: what happens when you're logged in as a page?\n              if(!ctx.globalOptions.updatePresence) {\n                return;\n              }\n\n              // There should be only one key inside overlay\n              Object.keys(v.overlay).map(function(userID) {\n                var formattedPresence = utils.formatPresence(v.overlay[userID], userID);\n                if(ctx.loggedIn) {\n                  return globalCallback(null, formattedPresence);\n                }\n              });\n              break;\n            case 'delta':\n              if (ctx.globalOptions.pageID || (v.delta.class !== \"NewMessage\" && !ctx.globalOptions.listenEvents)) return\n\n              if (v.delta.class == \"NewMessage\") {\n                (function resolveAttachmentUrl(i) {\n                  if (i == v.delta.attachments.length) {\n                    var fmtMsg = utils.formatDeltaMessage(v);\n                    return (!ctx.globalOptions.selfListen && fmtMsg.senderID === ctx.userID) ? undefined : globalCallback(null, fmtMsg);\n                  } else {\n                    if (v.delta.attachments[i].mercury.attach_type == 'photo') {\n                      defaultFuncs\n                        .get(\"https://www.facebook.com/mercury/attachments/photo/?photo_id=\" + v.delta.attachments[i].fbid, ctx.jar, {})\n                        .then(utils.parseAndCheckLogin(ctx.jar, defaultFuncs))\n                        .then(function (resData) {\n                          if (!resData.error) v.delta.attachments[i].mercury.url = resData.jsmods.require[0][3][0]\n                          return resolveAttachmentUrl(i + 1);\n                        })\n                    }\n                  }\n                })(0)\n                break;\n              }\n\n              switch (v.delta.class) {\n                case 'AdminTextMessage':\n                  switch (v.delta.type) {\n                    case 'change_thread_theme':\n                    case 'change_thread_nickname':\n                    case 'change_thread_icon':\n                      break;\n                    default:\n                      return;\n                  }\n                case 'ThreadName':\n                case 'ParticipantsAddedToGroupThread':\n                case 'ParticipantLeftGroupThread':\n                  var formattedEvent = utils.formatEvent(v.delta);\n                  return (!ctx.globalOptions.selfListen && formattedEvent.author.toString() === ctx.userID || !ctx.loggedIn)\n                    ? undefined\n                    : globalCallback(null, formattedEvent);\n              }\n\n              break;\n            case 'messaging':\n              if (handleMessagingEvents(v)) {\n                return;\n              }\n              break;\n            case 'pages_messaging':\n              if(!ctx.globalOptions.pageID ||\n                v.event !== \"deliver\" ||\n                (!ctx.globalOptions.selfListen && (v.message.sender_fbid.toString() === ctx.userID ||\n                                                   v.message.sender_fbid.toString() === ctx.globalOptions.pageID)) ||\n                v.realtime_viewer_fbid.toString() !== ctx.globalOptions.pageID) {\n                return;\n              }\n\n              atLeastOne = true;\n              if (ctx.loggedIn) {\n                return globalCallback(null, utils.formatMessage(v));\n              }\n              break;\n          }\n        });\n\n        if(atLeastOne) {\n          // Send deliveryReceipt notification to the server\n          var formDeliveryReceipt = {};\n\n          resData.ms.filter(function(v) {\n            return v.message && v.message.mid && v.message.sender_fbid.toString() !== ctx.userID;\n          }).forEach(function(val, i) {\n            formDeliveryReceipt[\"[\" + i + \"]\"] = val.message.mid;\n          });\n\n          // If there's at least one, we do the post request\n          if(formDeliveryReceipt[\"[0]\"]) {\n            defaultFuncs.post(\"https://www.facebook.com/ajax/mercury/delivery_receipts.php\", ctx.jar, formDeliveryReceipt);\n          }\n        }\n      }\n\n      if(resData.seq) {\n        form.seq = resData.seq;\n      }\n      if(resData.tr) {\n        form.traceid = resData.tr;\n      }\n      if (currentlyRunning) {\n        currentlyRunning = setTimeout(listen, Math.random() * 200 + 50);\n      }\n      return;\n    })\n    .catch(function(err) {\n      if (err.code === 'ETIMEDOUT') {\n        log.info(\"listen\", \"Suppressed timeout error.\");\n      } else {\n        log.error(\"listen\", err);\n        globalCallback(err);\n      }\n      if (currentlyRunning) {\n        currentlyRunning = setTimeout(listen, Math.random() * 200 + 50);\n      }\n    });\n  }\n\n  return function(callback) {\n    globalCallback = callback;\n\n    if (!currentlyRunning) {\n      currentlyRunning = setTimeout(listen, Math.random() * 200 + 50, callback);\n    }\n\n    return stopListening;\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-facebook-chat-api/node_modules/facebook-chat-api/src/logout.js":"\"use strict\";\n\nvar utils = require(\"../utils\");\nvar log = require(\"npmlog\");\n\nmodule.exports = function(defaultFuncs, api, ctx) {\n  return function logout(callback) {\n    callback = callback || function() {};\n\n    var form = {\n      pmid: \"0\"\n    };\n\n    defaultFuncs\n      .post('https://www.facebook.com/bluebar/modern_settings_menu/?help_type=364455653583099&show_contextual_help=1', ctx.jar, form)\n      .then(utils.parseAndCheckLogin(ctx.jar, defaultFuncs))\n      .then(function(resData) {\n        var elem = resData.jsmods.instances[0][2][0].filter(function(v) {\n          return v.value === \"logout\";\n        })[0];\n\n        var html = resData.jsmods.markup.filter(function(v) {\n          return v[0] === elem.markup.__m;\n        })[0][1].__html;\n\n        var form = {\n          fb_dtsg: utils.getFrom(html, \"\\\"fb_dtsg\\\" value=\\\"\", \"\\\"\"),\n          ref: utils.getFrom(html, \"\\\"ref\\\" value=\\\"\", \"\\\"\"),\n          h: utils.getFrom(html, \"\\\"h\\\" value=\\\"\", \"\\\"\"),\n        };\n\n        return utils\n          .post('https://www.facebook.com/logout.php', ctx.jar, form)\n          .then(utils.saveCookies(ctx.jar));\n      })\n      .then(function(res) {\n        if(!res.headers) {\n          throw {error: \"An error occurred when logging out.\"};\n        }\n\n        return utils\n          .get(res.headers.location, ctx.jar)\n          .then(utils.saveCookies(ctx.jar));\n      })\n      .then(function() {\n        ctx.loggedIn = false;\n        log.info(\"logout\", \"Logged out successfully.\");\n        callback();\n      })\n      .catch(function(err) {\n        log.error(\"logout\", err);\n        return callback(err);\n      });\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-facebook-chat-api/node_modules/facebook-chat-api/src/markAsRead.js":"\"use strict\";\n\nvar utils = require(\"../utils\");\nvar log = require(\"npmlog\");\n\nmodule.exports = function(defaultFuncs, api, ctx) {\n  return function markAsRead(threadID, callback) {\n    if(!callback) {\n      callback = function() {};\n    }\n\n    var form = {};\n    form[\"ids[\" + threadID + \"]\"] = true;\n    form[\"watermarkTimestamp\"] = new Date().getTime();\n    form[\"shouldSendReadReceipt\"] = true;\n    form[\"commerce_last_message_type\"] = \"non_ad\";\n    form[\"titanOriginatedThreadId\"] = utils.generateThreadingID(ctx.clientID);\n\n    defaultFuncs\n      .post(\"https://www.facebook.com/ajax/mercury/change_read_status.php\", ctx.jar, form)\n      .then(utils.saveCookies(ctx.jar))\n      .then(utils.parseAndCheckLogin(ctx.jar, defaultFuncs))\n      .then(function(resData) {\n        if (resData.error) {\n          throw resData;\n        }\n\n        return callback();\n      })\n      .catch(function(err) {\n        log.error(\"markAsRead\", err);\n        return callback(err);\n      });\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-facebook-chat-api/node_modules/facebook-chat-api/src/muteThread.js":"\"use strict\";\n\nvar utils = require(\"../utils\");\nvar log = require(\"npmlog\");\n\nmodule.exports = function(defaultFuncs, api, ctx) {\n  // muteSecond: -1=permanent mute, 0=unmute, 60=one minute, 3600=one hour, etc.\n  return function muteThread(threadID, muteSeconds, callback) {\n    if(!callback) {\n      callback = function() {};\n    }\n\n    var form = {\n      thread_fbid: threadID,\n      mute_settings: muteSeconds\n    }\n\n    defaultFuncs\n      .post(\"https://www.facebook.com/ajax/mercury/change_mute_thread.php\", ctx.jar, form)\n      .then(utils.saveCookies(ctx.jar))\n      .then(utils.parseAndCheckLogin(ctx.jar, defaultFuncs))\n      .then(function(resData) {\n        if (resData.error) {\n          throw resData;\n        }\n\n        return callback();\n      })\n      .catch(function(err) {\n        log.error(\"muteThread\", err);\n        return callback(err);\n      });\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-facebook-chat-api/node_modules/facebook-chat-api/src/removeUserFromGroup.js":"\"use strict\";\n\nvar utils = require(\"../utils\");\nvar log = require(\"npmlog\");\n\nmodule.exports = function(defaultFuncs, api, ctx) {\n  return function removeUserFromGroup(userID, threadID, callback) {\n    if(!callback && utils.getType(threadID) === 'Function') {\n      throw {error: \"please pass a threadID as a second argument.\"};\n    }\n    if (utils.getType(threadID) !== \"Number\" && utils.getType(threadID) !== \"String\") {\n      throw {error: \"threadID should be of type Number or String and not \" + utils.getType(threadID) + \".\"};\n    }\n    if (utils.getType(userID) !== \"Number\" && utils.getType(userID) !== \"String\") {\n      throw {error: \"userID should be of type Number or String and not \" + utils.getType(userID) + \".\"};\n    }\n\n    if(!callback) {\n      callback = function() {};\n    }\n\n    var form = {\n      'uid' : userID,\n      'tid' : threadID,\n    };\n\n    defaultFuncs\n      .post(\"https://www.facebook.com/chat/remove_participants\", ctx.jar, form)\n      .then(utils.parseAndCheckLogin(ctx.jar, defaultFuncs))\n      .then(function(resData) {\n        if (!resData) {\n          throw {error: \"Remove from group failed.\"};\n        }\n        if(resData.error) {\n          throw resData;\n        }\n\n        return callback();\n      })\n      .catch(function(err) {\n        log.error(\"removeUserFromGroup\", err);\n        return callback(err);\n      });\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-facebook-chat-api/node_modules/facebook-chat-api/src/searchForThread.js":"\"use strict\";\n\nvar utils = require(\"../utils\");\n\nmodule.exports = function(defaultFuncs, api, ctx) {\n  return function searchForThread(name, callback) {\n    if (!callback) {\n      throw {error: \"searchForThread: need callback\"};\n    }\n\n    var tmpForm = {\n      client: 'web_messenger',\n      query: name,\n      offset: 0,\n      limit: 21,\n      index: 'fbid',\n    };\n\n    defaultFuncs\n      .post('https://www.facebook.com/ajax/mercury/search_threads.php', ctx.jar, tmpForm)\n      .then(utils.parseAndCheckLogin(ctx.jar, defaultFuncs))\n      .then(function(resData) {\n        if (resData.error) {\n          throw resData;\n        }\n        if (!resData.payload.mercury_payload.threads){\n          return callback({error: \"Could not find thread `\"+name+\"`.\"});\n        }\n        return callback(null, resData.payload.mercury_payload\n          .threads.map(utils.formatThread));\n      });\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-facebook-chat-api/node_modules/facebook-chat-api/src/sendMessage.js":"\"use strict\";\n\nvar utils = require(\"../utils\");\nvar log = require(\"npmlog\");\nvar bluebird = require(\"bluebird\");\n\nvar allowedProperties = {\n  attachment: true,\n  url: true,\n  sticker: true,\n  body: true,\n};\n\nmodule.exports = function(defaultFuncs, api, ctx) {\n  function uploadAttachment(attachments, callback) {\n    var uploads = [];\n\n    // create an array of promises\n    for (var i = 0; i < attachments.length; i++) {\n      if (!utils.isReadableStream(attachments[i])) {\n        throw {error: \"Attachment should be a readable stream and not \" + utils.getType(attachments[i]) + \".\"};\n      }\n\n      var form = {\n        upload_1024: attachments[i],\n        'voice_clip': 'true',\n      };\n\n      uploads.push(defaultFuncs\n        .postFormData(\"https://upload.facebook.com/ajax/mercury/upload.php\", ctx.jar, form, {})\n        .then(utils.parseAndCheckLogin(ctx.jar, defaultFuncs))\n        .then(function (resData) {\n          if (resData.error) {\n            throw resData;\n          }\n\n          // We have to return the data unformatted unless we want to change it\n          // back in sendMessage.\n          return resData.payload.metadata[0];\n        }));\n    }\n\n    // resolve all promises\n    bluebird\n      .all(uploads)\n      .then(function(resData) {\n        callback(null, resData);\n      })\n      .catch(function(err) {\n        log.error(\"uploadAttachment\", err);\n        return callback(err);\n      });\n  }\n\n  function getUrl(url, callback) {\n    var form = {\n      image_height: 960,\n      image_width: 960,\n      uri: url\n    };\n\n    defaultFuncs\n      .post(\"https://www.facebook.com/message_share_attachment/fromURI/\", ctx.jar, form)\n      .then(utils.parseAndCheckLogin(ctx.jar, defaultFuncs))\n      .then(function(resData) {\n        if (resData.error) {\n          return callback(resData);\n        }\n\n        if (!resData.payload) {\n          return callback({error: 'Invalid url'});\n        }\n\n        callback(null, resData.payload.share_data.share_params);\n      })\n      .catch(function(err) {\n        log.error(\"getUrl\", err);\n        return callback(err);\n      });\n  }\n\n  function sendContent(form, threadID, isSingleUser, messageAndOTID, callback) {\n    // There are three cases here:\n    // 1. threadID is of type array, where we're starting a new group chat with users\n    //    specified in the array.\n    // 2. User is sending a message to a specific user.\n    // 3. No additional form params and the message goes to an existing group chat.\n    if(utils.getType(threadID) === \"Array\") {\n      for (var i  = 0; i < threadID.length; i++) {\n        form['specific_to_list[' + i + ']'] = \"fbid:\" + threadID[i];\n      }\n      form['specific_to_list[' + (threadID.length) + ']'] = \"fbid:\" + ctx.userID;\n      form['client_thread_id'] = \"root:\" + messageAndOTID;\n      log.info(\"sendMessage\", \"Sending message to multiple users: \" + threadID);\n    } else {\n      // This means that threadID is the id of a user, and the chat\n      // is a single person chat\n      if(isSingleUser) {\n        form['specific_to_list[0]'] = \"fbid:\" + threadID;\n        form['specific_to_list[1]'] = \"fbid:\" + ctx.userID;\n        form['other_user_fbid'] = threadID;\n      } else {\n        form['thread_fbid'] = threadID;\n      }\n    }\n\n    if(ctx.globalOptions.pageID) {\n      form['author'] = \"fbid:\" + ctx.globalOptions.pageID;\n      form['specific_to_list[1]'] = \"fbid:\" + ctx.globalOptions.pageID;\n      form['creator_info[creatorID]'] = ctx.userID;\n      form['creator_info[creatorType]'] = \"direct_admin\";\n      form['creator_info[labelType]'] = \"sent_message\";\n      form['creator_info[pageID]'] = ctx.globalOptions.pageID;\n      form['request_user_id'] = ctx.globalOptions.pageID;\n      form['creator_info[profileURI]'] = \"https://www.facebook.com/profile.php?id=\" + ctx.userID;\n    }\n\n    defaultFuncs\n      .post(\"https://www.facebook.com/messaging/send/\", ctx.jar, form)\n      .then(utils.parseAndCheckLogin(ctx.jar, defaultFuncs))\n      .then(function(resData) {\n        if (!resData) {\n          return callback({error: \"Send message failed.\"});\n        }\n\n        if (resData.error) {\n          if (resData.error === 1545012) {\n            log.warn(\"sendMessage\", \"Got error 1545012. This might mean that you're not part of the conversation \"\n              + threadID);\n          }\n          return callback(resData);\n        }\n\n        var messageInfo = resData.payload.actions.reduce(function(p, v) {\n          return {\n            threadID: v.thread_fbid,\n            messageID: v.message_id,\n            timestamp: v.timestamp\n          } || p; }, null);\n\n        return callback(null, messageInfo);\n      })\n      .catch(function(err) {\n        log.error(\"sendMessage\", err);\n        return callback(err);\n      });\n  }\n\n  function send(form, threadID, messageAndOTID, callback) {\n    // We're doing a query to this to check if the given id is the id of\n    // a user or of a group chat. The form will be different depending\n    // on that.\n    if(utils.getType(threadID) === \"Array\") {\n      sendContent(form, threadID, false, messageAndOTID, callback);\n    } else {\n      api.getUserInfo(threadID, function(err, res) {\n        if(err) {\n          return callback(err);\n        }\n        sendContent(form, threadID, Object.keys(res).length > 0, messageAndOTID, callback);\n      });\n    }\n  }\n\n  function handleUrl(msg, form, callback, cb) {\n    if (msg.url) {\n      form['shareable_attachment[share_type]'] = '100';\n      getUrl(msg.url, function (err, params) {\n        if (err) {\n          return callback(err);\n        }\n\n        form['shareable_attachment[share_params]'] = params;\n        cb();\n      });\n    } else {\n      cb();\n    }\n  }\n\n  function handleSticker(msg, form, callback, cb) {\n    if (msg.sticker) {\n      form['sticker_id'] = msg.sticker;\n    }\n    cb();\n  }\n\n  function handleAttachment(msg, form, callback, cb) {\n    if (msg.attachment) {\n      form['image_ids'] = [];\n      form['gif_ids'] = [];\n      form['file_ids'] = [];\n      form['video_ids'] = [];\n      form['audio_ids'] = [];\n\n      if (utils.getType(msg.attachment) !== 'Array') {\n        msg.attachment = [msg.attachment];\n      }\n\n      uploadAttachment(msg.attachment, function (err, files) {\n        if (err) {\n          return callback(err);\n        }\n\n        files.forEach(function (file) {\n          var key = Object.keys(file);\n          var type = key[0]; // image_id, file_id, etc\n          form['' + type + 's'].push(file[type]); // push the id\n        });\n        cb();\n      });\n    } else {\n      cb();\n    }\n  }\n\n  return function sendMessage(msg, threadID, callback) {\n    if(!callback && utils.getType(threadID) === 'Function') {\n      return callback({error: \"Pass a threadID as a second argument.\"});\n    }\n    if(!callback) {\n      callback = function() {};\n    }\n\n    var msgType = utils.getType(msg);\n    var threadIDType = utils.getType(threadID);\n\n    if(msgType !== \"String\" && msgType !== \"Object\") {\n      return callback({error: \"Message should be of type string or object and not \" + msgType + \".\"});\n    }\n\n    // Changing this to accomodate an array of users\n    if(threadIDType !== \"Array\" && threadIDType !== \"Number\" && threadIDType !== \"String\") {\n      return callback({error: \"ThreadID should be of type number, string, or array and not \" + threadIDType + \".\"});\n    }\n\n    if (msgType === \"String\") {\n      msg = { body: msg };\n    }\n\n    var disallowedProperties = Object.keys(msg).filter(prop => !allowedProperties[prop]);\n    if (disallowedProperties.length > 0) {\n      return callback({error: \"Dissallowed props: `\" + disallowedProperties.join(', ') + \"`\"});\n    }\n\n    var messageAndOTID = utils.generateOfflineThreadingID();\n\n    var form = {\n      'client' : 'mercury',\n      'action_type' : 'ma-type:user-generated-message',\n      'author' : 'fbid:' + ctx.userID,\n      'timestamp' : Date.now(),\n      'timestamp_absolute' : 'Today',\n      'timestamp_relative' : utils.generateTimestampRelative(),\n      'timestamp_time_passed' : '0',\n      'is_unread' : false,\n      'is_cleared' : false,\n      'is_forward' : false,\n      'is_filtered_content' : false,\n      'is_filtered_content_bh':false,\n      'is_filtered_content_account':false,\n      'is_filtered_content_quasar':false,\n      'is_filtered_content_invalid_app':false,\n      'is_spoof_warning' : false,\n      'source' : 'source:chat:web',\n      'source_tags[0]' : 'source:chat',\n      'body' : msg.body ? msg.body.toString() : \"\",\n      'html_body' : false,\n      'ui_push_phase' : 'V3',\n      'status' : '0',\n      'offline_threading_id' : messageAndOTID,\n      'message_id' : messageAndOTID,\n      'threading_id': utils.generateThreadingID(ctx.clientID),\n      'ephemeral_ttl_mode:': '0',\n      'manual_retry_cnt' : '0',\n      'has_attachment' : !!(msg.attachment || msg.url || msg.sticker),\n      'signatureID' : utils.getSignatureID(),\n    };\n\n    handleSticker(msg, form, callback,\n      () => handleAttachment(msg, form, callback,\n        () => handleUrl(msg, form, callback,\n          () => send(form, threadID, messageAndOTID, callback))));\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-facebook-chat-api/node_modules/facebook-chat-api/src/sendTypingIndicator.js":"\"use strict\";\n\nvar utils = require(\"../utils\");\nvar log = require(\"npmlog\");\n\nmodule.exports = function(defaultFuncs, api, ctx) {\n  function makeTypingIndicator(typ, threadID, callback) {\n    var form = {\n      typ: +typ,\n      to: '',\n      source: 'mercury-chat',\n      thread: threadID\n    };\n\n    // Check if thread is single person chat or group chat\n    // More info on this is in api.sendMessage\n    api.getUserInfo(threadID, function(err, res) {\n      if (err) {\n        return callback(err);\n      }\n\n      // If id is single person chat\n      if(Object.keys(res).length > 0) {\n        form.to = threadID;\n      }\n\n      defaultFuncs\n        .post(\"https://www.facebook.com/ajax/messaging/typ.php\", ctx.jar, form)\n        .then(utils.parseAndCheckLogin(ctx.jar, defaultFuncs))\n        .then(function(resData) {\n          if(resData.error) {\n            throw resData;\n          }\n\n          return callback();\n        })\n        .catch(function(err) {\n          log.error(\"sendTypingIndicator\", err);\n          return callback(err);\n        });\n    });\n  }\n\n  return function sendTypingIndicator(threadID, callback) {\n    if(!callback) {\n      throw {error: \"sendTypingIndicator: need callback\"};\n    }\n\n    makeTypingIndicator(true, threadID, callback);\n\n    // TODO: document that we return the stop/cancel functions now\n    return function end(cb) {\n      makeTypingIndicator(false, threadID, cb || function() {});\n    };\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-facebook-chat-api/node_modules/facebook-chat-api/src/setTitle.js":"\"use strict\";\n\nvar utils = require(\"../utils\");\nvar log = require(\"npmlog\");\n\nmodule.exports = function(defaultFuncs, api, ctx) {\n  return function setTitle(newTitle, threadID, callback) {\n    if(!callback && utils.getType(threadID) === 'Function') {\n      throw {error: \"please pass a threadID as a second argument.\"};\n    }\n\n    if(!callback) {\n      callback = function() {};\n    }\n\n    var messageAndOTID = utils.generateOfflineThreadingID();\n    var form = {\n      'client' : 'mercury',\n      'action_type' : 'ma-type:log-message',\n      'author' : 'fbid:' + ctx.userID,\n      'thread_id' : '',\n      'author_email' : '',\n      'coordinates' : '',\n      'timestamp' : Date.now(),\n      'timestamp_absolute' : 'Today',\n      'timestamp_relative' : utils.generateTimestampRelative(),\n      'timestamp_time_passed' : '0',\n      'is_unread' : false,\n      'is_cleared' : false,\n      'is_forward' : false,\n      'is_filtered_content' : false,\n      'is_spoof_warning' : false,\n      'source' : 'source:chat:web',\n      'source_tags[0]' : 'source:chat',\n      'status' : '0',\n      'offline_threading_id' : messageAndOTID,\n      'message_id' : messageAndOTID,\n      'threading_id': utils.generateThreadingID(ctx.clientID),\n      'manual_retry_cnt' : '0',\n      'thread_fbid' : threadID,\n      'log_message_data[name]' : newTitle,\n      'log_message_type' : 'log:thread-name'\n    };\n\n    defaultFuncs\n      .post(\"https://www.facebook.com/messaging/send/\", ctx.jar, form)\n      .then(utils.parseAndCheckLogin(ctx.jar, defaultFuncs))\n      .then(function(resData) {\n        if (resData.error && resData.error === 1545012){\n          throw {error: \"Cannot change chat title: Not member of chat.\"};\n        }\n\n        if (resData.error && resData.error === 1545003){\n          throw {error: \"Cannot set title of single-user chat.\"};\n        }\n\n        if (resData.error) {\n          throw resData;\n        }\n\n        return callback();\n      })\n      .catch(function(err) {\n        log.error(\"setTitle\", err);\n        return callback(err);\n      });\n  };\n};\n"}